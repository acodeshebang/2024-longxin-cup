// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module PC(	// @[src/main/CPU/PC.scala:5:7]
  input         clock,	// @[src/main/CPU/PC.scala:5:7]
                reset,	// @[src/main/CPU/PC.scala:5:7]
                io_if_Jump,	// @[src/main/CPU/PC.scala:6:16]
  output [31:0] io_now_pc,	// @[src/main/CPU/PC.scala:6:16]
  input         io_if_valid,	// @[src/main/CPU/PC.scala:6:16]
  input  [31:0] io_alu_out_data	// @[src/main/CPU/PC.scala:6:16]
);

  reg [31:0] pc_reg;	// @[src/main/CPU/PC.scala:9:25]
  always @(posedge clock) begin	// @[src/main/CPU/PC.scala:5:7]
    if (reset)	// @[src/main/CPU/PC.scala:5:7]
      pc_reg <= 32'h80000000;	// @[src/main/CPU/PC.scala:9:25]
    else if (io_if_Jump)	// @[src/main/CPU/PC.scala:6:16]
      pc_reg <= io_alu_out_data;	// @[src/main/CPU/PC.scala:9:25]
    else if (io_if_valid)	// @[src/main/CPU/PC.scala:6:16]
      pc_reg <= pc_reg + 32'h4;	// @[src/main/CPU/PC.scala:9:25, :15:62]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/CPU/PC.scala:5:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/CPU/PC.scala:5:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/CPU/PC.scala:5:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// @[src/main/CPU/PC.scala:5:7]
    initial begin	// @[src/main/CPU/PC.scala:5:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/CPU/PC.scala:5:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/CPU/PC.scala:5:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/CPU/PC.scala:5:7]
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// @[src/main/CPU/PC.scala:5:7]
        pc_reg = _RANDOM[/*Zero width*/ 1'b0];	// @[src/main/CPU/PC.scala:5:7, :9:25]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/CPU/PC.scala:5:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/CPU/PC.scala:5:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_now_pc = pc_reg;	// @[src/main/CPU/PC.scala:5:7, :9:25]
endmodule

module FetchToDecode(	// @[src/main/CPU/FetchToDecode.scala:4:7]
  input         clock,	// @[src/main/CPU/FetchToDecode.scala:4:7]
                reset,	// @[src/main/CPU/FetchToDecode.scala:4:7]
  output        io_in_ready,	// @[src/main/CPU/FetchToDecode.scala:5:16]
  input         io_in_valid,	// @[src/main/CPU/FetchToDecode.scala:5:16]
  input  [31:0] io_in_bits_Instruction,	// @[src/main/CPU/FetchToDecode.scala:5:16]
                io_in_bits_now_pc,	// @[src/main/CPU/FetchToDecode.scala:5:16]
  input         io_out_ready,	// @[src/main/CPU/FetchToDecode.scala:5:16]
  output        io_out_valid,	// @[src/main/CPU/FetchToDecode.scala:5:16]
  output [31:0] io_out_bits_Instruction,	// @[src/main/CPU/FetchToDecode.scala:5:16]
                io_out_bits_now_pc,	// @[src/main/CPU/FetchToDecode.scala:5:16]
  input         io_if_var_pc_Conflict	// @[src/main/CPU/FetchToDecode.scala:5:16]
);

  reg         FetchToDecode_valid;	// @[src/main/CPU/FetchToDecode.scala:12:38]
  wire        FetchToDecode_go_in = io_out_ready | ~FetchToDecode_valid;	// @[src/main/CPU/FetchToDecode.scala:12:38, :20:{45,47}]
  reg  [31:0] FetchToDecode_reg_Instruction;	// @[src/main/CPU/FetchToDecode.scala:29:38]
  reg  [31:0] FetchToDecode_reg_now_pc;	// @[src/main/CPU/FetchToDecode.scala:29:38]
  always @(posedge clock) begin	// @[src/main/CPU/FetchToDecode.scala:4:7]
    if (reset) begin	// @[src/main/CPU/FetchToDecode.scala:4:7]
      FetchToDecode_valid <= 1'h0;	// @[src/main/CPU/FetchToDecode.scala:12:38]
      FetchToDecode_reg_Instruction <= 32'h0;	// @[src/main/CPU/FetchToDecode.scala:27:40, :29:38]
      FetchToDecode_reg_now_pc <= 32'h0;	// @[src/main/CPU/FetchToDecode.scala:27:40, :29:38]
    end
    else if (FetchToDecode_go_in) begin	// @[src/main/CPU/FetchToDecode.scala:20:45]
      FetchToDecode_valid <= io_in_valid & io_if_var_pc_Conflict;	// @[src/main/CPU/FetchToDecode.scala:12:38, :18:64]
      FetchToDecode_reg_Instruction <= io_in_bits_Instruction;	// @[src/main/CPU/FetchToDecode.scala:29:38]
      FetchToDecode_reg_now_pc <= io_in_bits_now_pc;	// @[src/main/CPU/FetchToDecode.scala:29:38]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/CPU/FetchToDecode.scala:4:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/CPU/FetchToDecode.scala:4:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/CPU/FetchToDecode.scala:4:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:2];	// @[src/main/CPU/FetchToDecode.scala:4:7]
    initial begin	// @[src/main/CPU/FetchToDecode.scala:4:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/CPU/FetchToDecode.scala:4:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/CPU/FetchToDecode.scala:4:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/CPU/FetchToDecode.scala:4:7]
        for (logic [1:0] i = 2'h0; i < 2'h3; i += 2'h1) begin
          _RANDOM[i] = `RANDOM;	// @[src/main/CPU/FetchToDecode.scala:4:7]
        end	// @[src/main/CPU/FetchToDecode.scala:4:7]
        FetchToDecode_valid = _RANDOM[2'h0][0];	// @[src/main/CPU/FetchToDecode.scala:4:7, :12:38]
        FetchToDecode_reg_Instruction = {_RANDOM[2'h0][31:1], _RANDOM[2'h1][0]};	// @[src/main/CPU/FetchToDecode.scala:4:7, :12:38, :29:38]
        FetchToDecode_reg_now_pc = {_RANDOM[2'h1][31:1], _RANDOM[2'h2][0]};	// @[src/main/CPU/FetchToDecode.scala:4:7, :29:38]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/CPU/FetchToDecode.scala:4:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/CPU/FetchToDecode.scala:4:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = FetchToDecode_go_in;	// @[src/main/CPU/FetchToDecode.scala:4:7, :20:45]
  assign io_out_valid = FetchToDecode_valid;	// @[src/main/CPU/FetchToDecode.scala:4:7, :12:38]
  assign io_out_bits_Instruction =
    FetchToDecode_valid ? FetchToDecode_reg_Instruction : 32'h0;	// @[src/main/CPU/FetchToDecode.scala:4:7, :12:38, :27:40, :29:38, :30:23]
  assign io_out_bits_now_pc = FetchToDecode_valid ? FetchToDecode_reg_now_pc : 32'h0;	// @[src/main/CPU/FetchToDecode.scala:4:7, :12:38, :27:40, :29:38, :30:23]
endmodule

module imm(	// @[src/main/CPU/imm.scala:6:7]
  input  [31:0] io_Instruction,	// @[src/main/CPU/imm.scala:7:30]
  output [31:0] io_Out_Eximm,	// @[src/main/CPU/imm.scala:7:30]
  input  [3:0]  io_imm_option	// @[src/main/CPU/imm.scala:7:30]
);

  reg  [31:0] casez_tmp;	// @[src/main/CPU/imm.scala:22:23]
  wire [31:0] _GEN = {{14{io_Instruction[25]}}, io_Instruction[25:10], 2'h0};	// @[src/main/CPU/imm.scala:12:46, :22:23]
  wire [3:0]  _GEN_0 = {4{io_Instruction[9]}};	// @[src/main/CPU/imm.scala:22:23]
  always_comb begin	// @[src/main/CPU/imm.scala:22:23]
    casez (io_imm_option)	// @[src/main/CPU/imm.scala:22:23]
      4'b0000:
        casez_tmp = 32'h0;	// @[src/main/CPU/imm.scala:22:23]
      4'b0001:
        casez_tmp = {{24{io_Instruction[17]}}, io_Instruction[17:10]};	// @[src/main/CPU/imm.scala:9:46, :22:23]
      4'b0010:
        casez_tmp = {{20{io_Instruction[21]}}, io_Instruction[21:10]};	// @[src/main/CPU/imm.scala:10:46, :22:23]
      4'b0011:
        casez_tmp = {{18{io_Instruction[23]}}, io_Instruction[23:10]};	// @[src/main/CPU/imm.scala:11:46, :22:23]
      4'b0100:
        casez_tmp = _GEN;	// @[src/main/CPU/imm.scala:22:23]
      4'b0101:
        casez_tmp = {io_Instruction[24:5], 12'h0};	// @[src/main/CPU/imm.scala:13:{31,46}, :22:23]
      4'b0110:
        casez_tmp = {{9{io_Instruction[4]}}, io_Instruction[4:0], io_Instruction[27:10]};	// @[src/main/CPU/imm.scala:14:{46,68}, :22:23]
      4'b0111:
        casez_tmp = {_GEN_0, io_Instruction[9:0], io_Instruction[27:10]};	// @[src/main/CPU/imm.scala:14:68, :15:46, :22:23]
      4'b1000:
        casez_tmp = {20'h0, io_Instruction[21:10]};	// @[src/main/CPU/imm.scala:10:46, :16:31, :22:23]
      4'b1001:
        casez_tmp = {27'h0, io_Instruction[14:10]};	// @[src/main/CPU/imm.scala:17:{31,56}, :22:23]
      4'b1010:
        casez_tmp = _GEN;	// @[src/main/CPU/imm.scala:22:23]
      4'b1011:
        casez_tmp = {_GEN_0, io_Instruction[9:0], io_Instruction[25:10], 2'h0};	// @[src/main/CPU/imm.scala:12:46, :15:46, :22:23]
      4'b1100:
        casez_tmp = 32'h0;	// @[src/main/CPU/imm.scala:22:23]
      4'b1101:
        casez_tmp = 32'h0;	// @[src/main/CPU/imm.scala:22:23]
      4'b1110:
        casez_tmp = 32'h0;	// @[src/main/CPU/imm.scala:22:23]
      default:
        casez_tmp = 32'h0;	// @[src/main/CPU/imm.scala:22:23]
    endcase	// @[src/main/CPU/imm.scala:22:23]
  end // always_comb
  assign io_Out_Eximm = casez_tmp;	// @[src/main/CPU/imm.scala:6:7, :22:23]
endmodule

module Decode(	// @[src/main/CPU/Decode.scala:5:7]
  input  [31:0] io_Instruction,	// @[src/main/CPU/Decode.scala:6:16]
  output [3:0]  io_imm_option,	// @[src/main/CPU/Decode.scala:6:16]
                io_conditional_branch_option,	// @[src/main/CPU/Decode.scala:6:16]
                io_alu_option,	// @[src/main/CPU/Decode.scala:6:16]
  output [2:0]  io_MemoryAccess_option,	// @[src/main/CPU/Decode.scala:6:16]
  output [1:0]  io_GRGDataSel_option,	// @[src/main/CPU/Decode.scala:6:16]
                io_alu_a_sel,	// @[src/main/CPU/Decode.scala:6:16]
                io_alu_b_sel,	// @[src/main/CPU/Decode.scala:6:16]
  output        io_ram_r,	// @[src/main/CPU/Decode.scala:6:16]
                io_ram_w,	// @[src/main/CPU/Decode.scala:6:16]
                io_rd_en,	// @[src/main/CPU/Decode.scala:6:16]
  output [4:0]  io_rd_addr,	// @[src/main/CPU/Decode.scala:6:16]
                io_rj_addr,	// @[src/main/CPU/Decode.scala:6:16]
                io_rk_addr	// @[src/main/CPU/Decode.scala:6:16]
);

  wire _signal_T_1 = io_Instruction[31:22] == 10'hA;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_3 = io_Instruction[31:22] == 10'hE;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_5 = io_Instruction[31:22] == 10'hD;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_7 = io_Instruction[31:15] == 17'h81;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_9 = io_Instruction[31:15] == 17'h89;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_11 = io_Instruction[31:25] == 7'hA;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_13 = io_Instruction[31:25] == 7'hE;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_15 = io_Instruction[31:15] == 17'h20;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_17 = io_Instruction[31:15] == 17'h22;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_19 = io_Instruction[31:15] == 17'h2A;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_21 = io_Instruction[31:15] == 17'h29;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_23 = io_Instruction[31:15] == 17'h2B;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_25 = io_Instruction[31:15] == 17'h38;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_27 = io_Instruction[31:26] == 6'h17;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_29 = io_Instruction[31:26] == 6'h16;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_31 = io_Instruction[31:26] == 6'h14;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_33 = io_Instruction[31:26] == 6'h15;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_35 = io_Instruction[31:26] == 6'h13;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_37 = io_Instruction[31:22] == 10'hA6;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_235 = io_Instruction[31:22] == 10'hA4;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_41 = io_Instruction[31:22] == 10'hA2;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _signal_T_254 = io_Instruction[31:22] == 10'hA0;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38]
  wire _GEN = _signal_T_41 | _signal_T_254;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  wire _GEN_0 = _signal_T_37 | _signal_T_235 | _GEN;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  wire _GEN_1 = _signal_T_31 | _signal_T_33;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  wire _GEN_2 =
    _signal_T_15 | _signal_T_17 | _signal_T_19 | _signal_T_21 | _signal_T_23
    | _signal_T_25;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  wire _GEN_3 = _signal_T_11 | _signal_T_13;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  wire _GEN_4 =
    _signal_T_1 | _signal_T_3 | _signal_T_5 | _signal_T_7 | _signal_T_9 | _signal_T_11
    | _signal_T_13 | _GEN_2;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  wire _GEN_5 =
    _signal_T_27 | _signal_T_29 | _signal_T_31 | _signal_T_33 | _signal_T_35 | _GEN_0;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  wire _GEN_6 = _signal_T_33 | _signal_T_35;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  wire _GEN_7 =
    _signal_T_1 | _signal_T_3 | _signal_T_5 | _signal_T_7 | _signal_T_9 | _signal_T_11
    | _signal_T_13 | _signal_T_15 | _signal_T_17 | _signal_T_19 | _signal_T_21
    | _signal_T_23 | _signal_T_25 | _signal_T_27 | _signal_T_29 | _signal_T_31 | _GEN_6;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  wire _GEN_8 = _signal_T_37 | _signal_T_235;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  wire _GEN_9 = _signal_T_27 | _signal_T_29 | _signal_T_31;	// @[src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  assign io_imm_option =
    _signal_T_1
      ? 4'h2
      : _signal_T_3 | _signal_T_5
          ? 4'h8
          : _signal_T_7 | _signal_T_9
              ? 4'h9
              : _GEN_3
                  ? 4'h5
                  : _GEN_2
                      ? 4'h0
                      : _signal_T_27 | _signal_T_29
                          ? 4'h4
                          : _GEN_1 ? 4'hB : _signal_T_35 ? 4'hA : {2'h0, _GEN_0, 1'h0};	// @[src/main/CPU/Decode.scala:5:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  assign io_conditional_branch_option =
    _GEN_4
      ? 4'h0
      : _signal_T_27
          ? 4'h1
          : _signal_T_29 ? 4'h2 : _GEN_1 ? 4'h3 : _signal_T_35 ? 4'h5 : 4'h0;	// @[src/main/CPU/Decode.scala:5:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  assign io_alu_option =
    _signal_T_1
      ? 4'h1
      : _signal_T_3
          ? 4'h3
          : _signal_T_5
              ? 4'h5
              : _signal_T_7
                  ? 4'h7
                  : _signal_T_9
                      ? 4'h6
                      : _signal_T_11
                          ? 4'h0
                          : _signal_T_13 | _signal_T_15
                              ? 4'h1
                              : _signal_T_17
                                  ? 4'h2
                                  : _signal_T_19
                                      ? 4'h3
                                      : _signal_T_21
                                          ? 4'h5
                                          : _signal_T_23
                                              ? 4'h4
                                              : _signal_T_25 ? 4'h8 : {3'h0, _GEN_5};	// @[src/main/CPU/Decode.scala:5:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  assign io_MemoryAccess_option =
    _GEN_7
      ? 3'h0
      : _signal_T_37
          ? 3'h2
          : _signal_T_235 ? 3'h1 : _signal_T_41 ? 3'h2 : {2'h0, _signal_T_254};	// @[src/main/CPU/Decode.scala:5:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  assign io_GRGDataSel_option =
    _signal_T_1 | _signal_T_3 | _signal_T_5 | _signal_T_7 | _signal_T_9 | _signal_T_11
    | _signal_T_13 | _signal_T_15 | _signal_T_17 | _signal_T_19 | _signal_T_21
    | _signal_T_23 | _signal_T_25 | _GEN_9
      ? 2'h0
      : _GEN_6 ? 2'h3 : _GEN_8 ? 2'h0 : {_GEN, 1'h0};	// @[src/main/CPU/Decode.scala:5:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  assign io_alu_a_sel =
    _signal_T_1 | _signal_T_3 | _signal_T_5 | _signal_T_7 | _signal_T_9 | _signal_T_11
      ? 2'h0
      : _signal_T_13
          ? 2'h1
          : _GEN_2 ? 2'h0 : {1'h0, _signal_T_27 | _signal_T_29 | _GEN_1};	// @[src/main/CPU/Decode.scala:5:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  assign io_alu_b_sel =
    _signal_T_1 | _signal_T_3 | _signal_T_5 | _signal_T_7 | _signal_T_9 | _GEN_3
      ? 2'h1
      : _GEN_2 ? 2'h0 : {1'h0, _GEN_5};	// @[src/main/CPU/Decode.scala:5:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  assign io_ram_r =
    ~(_signal_T_1 | _signal_T_3 | _signal_T_5 | _signal_T_7 | _signal_T_9 | _signal_T_11
      | _signal_T_13 | _signal_T_15 | _signal_T_17 | _signal_T_19 | _signal_T_21
      | _signal_T_23 | _signal_T_25 | _signal_T_27 | _signal_T_29 | _signal_T_31
      | _signal_T_33 | _signal_T_35 | _GEN_8) & (_signal_T_41 | _signal_T_254);	// @[src/main/CPU/Decode.scala:5:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  assign io_ram_w = ~_GEN_7 & (_signal_T_37 | _signal_T_235);	// @[src/main/CPU/Decode.scala:5:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  assign io_rd_en =
    _GEN_4 | ~_GEN_9 & (_GEN_6 | ~_GEN_8 & (_signal_T_41 | _signal_T_254));	// @[src/main/CPU/Decode.scala:5:7, src/main/scala/chisel3/util/Lookup.scala:31:38, :34:39]
  assign io_rd_addr = io_Instruction[31:26] == 6'h15 ? 5'h1 : io_Instruction[4:0];	// @[src/main/CPU/Decode.scala:5:7, :25:{22,37,61}, src/main/scala/chisel3/util/Lookup.scala:31:38]
  assign io_rj_addr = io_Instruction[9:5];	// @[src/main/CPU/Decode.scala:5:7, :24:33]
  assign io_rk_addr = io_Instruction[14:10];	// @[src/main/CPU/Decode.scala:5:7, :23:33]
endmodule

module conditional_branch(	// @[src/main/CPU/conditional_branch.scala:6:7]
  input  [3:0]  io_conditional_branch_option,	// @[src/main/CPU/conditional_branch.scala:7:16]
  output        io_if_Jump,	// @[src/main/CPU/conditional_branch.scala:7:16]
  input  [31:0] io_rj_data,	// @[src/main/CPU/conditional_branch.scala:7:16]
                io_rd_data,	// @[src/main/CPU/conditional_branch.scala:7:16]
                io_now_pc,	// @[src/main/CPU/conditional_branch.scala:7:16]
                io_imm,	// @[src/main/CPU/conditional_branch.scala:7:16]
  output [31:0] io_out_var_pc_addr	// @[src/main/CPU/conditional_branch.scala:7:16]
);

  wire _conditional_branch_pc_var_result_T_2 = io_conditional_branch_option == 4'h1;	// @[src/main/CPU/conditional_branch.scala:14:110]
  wire _conditional_branch_pc_var_result_T_4 = io_conditional_branch_option == 4'h2;	// @[src/main/CPU/conditional_branch.scala:14:110]
  wire _conditional_branch_pc_var_result_T_6 = io_conditional_branch_option == 4'h3;	// @[src/main/CPU/conditional_branch.scala:14:110]
  wire _conditional_branch_pc_var_result_T_8 = io_conditional_branch_option == 4'h5;	// @[src/main/CPU/conditional_branch.scala:14:110]
  assign io_if_Jump =
    _conditional_branch_pc_var_result_T_8
    | (io_conditional_branch_option == 4'h4
         ? io_rj_data > io_rd_data
         : _conditional_branch_pc_var_result_T_6
           | (_conditional_branch_pc_var_result_T_4
                ? io_rj_data == io_rd_data
                : _conditional_branch_pc_var_result_T_2 & io_rj_data != io_rd_data));	// @[src/main/CPU/conditional_branch.scala:6:7, :10:55, :11:55, :13:64, :14:110]
  assign io_out_var_pc_addr =
    _conditional_branch_pc_var_result_T_8
      ? io_rj_data + io_imm
      : _conditional_branch_pc_var_result_T_6 | _conditional_branch_pc_var_result_T_4
        | _conditional_branch_pc_var_result_T_2
          ? io_now_pc + io_imm
          : 32'h0;	// @[src/main/CPU/conditional_branch.scala:6:7, :14:110, :25:54, :26:55, :27:117]
endmodule

module GenericRegisterGroup(	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
  input         clock,	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
                reset,	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
                io_rd_en,	// @[src/main/CPU/GenericRegisterGroup.scala:5:16]
  input  [4:0]  io_rd_addr_in,	// @[src/main/CPU/GenericRegisterGroup.scala:5:16]
                io_rd_addr_out,	// @[src/main/CPU/GenericRegisterGroup.scala:5:16]
                io_rj_addr,	// @[src/main/CPU/GenericRegisterGroup.scala:5:16]
                io_rk_addr,	// @[src/main/CPU/GenericRegisterGroup.scala:5:16]
  input  [31:0] io_rd_data_in,	// @[src/main/CPU/GenericRegisterGroup.scala:5:16]
  output [31:0] io_rj_data,	// @[src/main/CPU/GenericRegisterGroup.scala:5:16]
                io_rk_data,	// @[src/main/CPU/GenericRegisterGroup.scala:5:16]
                io_rd_data_out	// @[src/main/CPU/GenericRegisterGroup.scala:5:16]
);

  reg  [31:0] reg_group_0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_1;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_2;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_3;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_4;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_5;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_6;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_7;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_8;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_9;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_10;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_11;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_12;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_13;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_14;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_15;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_16;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_17;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_18;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_19;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_20;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_21;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_22;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_23;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_24;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_25;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_26;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_27;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_28;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_29;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_30;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] reg_group_31;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
  reg  [31:0] casez_tmp;	// @[src/main/CPU/GenericRegisterGroup.scala:8:22]
  always_comb begin	// @[src/main/CPU/GenericRegisterGroup.scala:8:22]
    casez (io_rj_addr)	// @[src/main/CPU/GenericRegisterGroup.scala:8:22]
      5'b00000:
        casez_tmp = reg_group_0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00001:
        casez_tmp = reg_group_1;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00010:
        casez_tmp = reg_group_2;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00011:
        casez_tmp = reg_group_3;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00100:
        casez_tmp = reg_group_4;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00101:
        casez_tmp = reg_group_5;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00110:
        casez_tmp = reg_group_6;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00111:
        casez_tmp = reg_group_7;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01000:
        casez_tmp = reg_group_8;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01001:
        casez_tmp = reg_group_9;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01010:
        casez_tmp = reg_group_10;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01011:
        casez_tmp = reg_group_11;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01100:
        casez_tmp = reg_group_12;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01101:
        casez_tmp = reg_group_13;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01110:
        casez_tmp = reg_group_14;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01111:
        casez_tmp = reg_group_15;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10000:
        casez_tmp = reg_group_16;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10001:
        casez_tmp = reg_group_17;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10010:
        casez_tmp = reg_group_18;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10011:
        casez_tmp = reg_group_19;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10100:
        casez_tmp = reg_group_20;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10101:
        casez_tmp = reg_group_21;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10110:
        casez_tmp = reg_group_22;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10111:
        casez_tmp = reg_group_23;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11000:
        casez_tmp = reg_group_24;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11001:
        casez_tmp = reg_group_25;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11010:
        casez_tmp = reg_group_26;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11011:
        casez_tmp = reg_group_27;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11100:
        casez_tmp = reg_group_28;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11101:
        casez_tmp = reg_group_29;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11110:
        casez_tmp = reg_group_30;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      default:
        casez_tmp = reg_group_31;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
    endcase	// @[src/main/CPU/GenericRegisterGroup.scala:8:22]
  end // always_comb
  reg  [31:0] casez_tmp_0;	// @[src/main/CPU/GenericRegisterGroup.scala:9:22]
  always_comb begin	// @[src/main/CPU/GenericRegisterGroup.scala:8:22]
    casez (io_rk_addr)	// @[src/main/CPU/GenericRegisterGroup.scala:8:22]
      5'b00000:
        casez_tmp_0 = reg_group_0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00001:
        casez_tmp_0 = reg_group_1;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00010:
        casez_tmp_0 = reg_group_2;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00011:
        casez_tmp_0 = reg_group_3;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00100:
        casez_tmp_0 = reg_group_4;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00101:
        casez_tmp_0 = reg_group_5;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00110:
        casez_tmp_0 = reg_group_6;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00111:
        casez_tmp_0 = reg_group_7;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01000:
        casez_tmp_0 = reg_group_8;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01001:
        casez_tmp_0 = reg_group_9;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01010:
        casez_tmp_0 = reg_group_10;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01011:
        casez_tmp_0 = reg_group_11;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01100:
        casez_tmp_0 = reg_group_12;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01101:
        casez_tmp_0 = reg_group_13;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01110:
        casez_tmp_0 = reg_group_14;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01111:
        casez_tmp_0 = reg_group_15;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10000:
        casez_tmp_0 = reg_group_16;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10001:
        casez_tmp_0 = reg_group_17;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10010:
        casez_tmp_0 = reg_group_18;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10011:
        casez_tmp_0 = reg_group_19;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10100:
        casez_tmp_0 = reg_group_20;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10101:
        casez_tmp_0 = reg_group_21;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10110:
        casez_tmp_0 = reg_group_22;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10111:
        casez_tmp_0 = reg_group_23;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11000:
        casez_tmp_0 = reg_group_24;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11001:
        casez_tmp_0 = reg_group_25;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11010:
        casez_tmp_0 = reg_group_26;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11011:
        casez_tmp_0 = reg_group_27;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11100:
        casez_tmp_0 = reg_group_28;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11101:
        casez_tmp_0 = reg_group_29;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11110:
        casez_tmp_0 = reg_group_30;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      default:
        casez_tmp_0 = reg_group_31;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
    endcase	// @[src/main/CPU/GenericRegisterGroup.scala:8:22]
  end // always_comb
  reg  [31:0] casez_tmp_1;	// @[src/main/CPU/GenericRegisterGroup.scala:10:26]
  always_comb begin	// @[src/main/CPU/GenericRegisterGroup.scala:8:22]
    casez (io_rd_addr_out)	// @[src/main/CPU/GenericRegisterGroup.scala:8:22]
      5'b00000:
        casez_tmp_1 = reg_group_0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00001:
        casez_tmp_1 = reg_group_1;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00010:
        casez_tmp_1 = reg_group_2;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00011:
        casez_tmp_1 = reg_group_3;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00100:
        casez_tmp_1 = reg_group_4;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00101:
        casez_tmp_1 = reg_group_5;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00110:
        casez_tmp_1 = reg_group_6;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b00111:
        casez_tmp_1 = reg_group_7;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01000:
        casez_tmp_1 = reg_group_8;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01001:
        casez_tmp_1 = reg_group_9;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01010:
        casez_tmp_1 = reg_group_10;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01011:
        casez_tmp_1 = reg_group_11;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01100:
        casez_tmp_1 = reg_group_12;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01101:
        casez_tmp_1 = reg_group_13;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01110:
        casez_tmp_1 = reg_group_14;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b01111:
        casez_tmp_1 = reg_group_15;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10000:
        casez_tmp_1 = reg_group_16;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10001:
        casez_tmp_1 = reg_group_17;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10010:
        casez_tmp_1 = reg_group_18;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10011:
        casez_tmp_1 = reg_group_19;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10100:
        casez_tmp_1 = reg_group_20;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10101:
        casez_tmp_1 = reg_group_21;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10110:
        casez_tmp_1 = reg_group_22;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b10111:
        casez_tmp_1 = reg_group_23;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11000:
        casez_tmp_1 = reg_group_24;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11001:
        casez_tmp_1 = reg_group_25;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11010:
        casez_tmp_1 = reg_group_26;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11011:
        casez_tmp_1 = reg_group_27;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11100:
        casez_tmp_1 = reg_group_28;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11101:
        casez_tmp_1 = reg_group_29;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      5'b11110:
        casez_tmp_1 = reg_group_30;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
      default:
        casez_tmp_1 = reg_group_31;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :8:22]
    endcase	// @[src/main/CPU/GenericRegisterGroup.scala:8:22]
  end // always_comb
  wire        _GEN = io_rd_en & (|io_rd_addr_in);	// @[src/main/CPU/GenericRegisterGroup.scala:12:{30,47}]
  always @(posedge clock) begin	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
    if (reset) begin	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
      reg_group_0 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_1 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_2 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_3 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_4 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_5 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_6 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_7 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_8 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_9 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_10 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_11 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_12 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_13 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_14 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_15 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_16 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_17 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_18 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_19 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_20 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_21 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_22 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_23 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_24 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_25 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_26 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_27 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_28 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_29 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_30 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      reg_group_31 <= 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
    end
    else begin	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
      if (_GEN & ~(|io_rd_addr_in))	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :12:{30,47,56}, :13:34]
        reg_group_0 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h1)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_1 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h2)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_2 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h3)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_3 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h4)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_4 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h5)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_5 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h6)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_6 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h7)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_7 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h8)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_8 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h9)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_9 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'hA)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_10 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'hB)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_11 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'hC)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_12 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'hD)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_13 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'hE)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_14 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'hF)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_15 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h10)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_16 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h11)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_17 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h12)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_18 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h13)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_19 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h14)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_20 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h15)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_21 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h16)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_22 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h17)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_23 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h18)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_24 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h19)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_25 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h1A)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_26 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h1B)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_27 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h1C)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_28 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h1D)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_29 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & io_rd_addr_in == 5'h1E)	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28, :12:{30,56}, :13:34]
        reg_group_30 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
      if (_GEN & (&io_rd_addr_in))	// @[src/main/CPU/GenericRegisterGroup.scala:7:28, :12:{30,56}, :13:34]
        reg_group_31 <= io_rd_data_in;	// @[src/main/CPU/GenericRegisterGroup.scala:7:28]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:31];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
    initial begin	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
        for (logic [5:0] i = 6'h0; i < 6'h20; i += 6'h1) begin
          _RANDOM[i[4:0]] = `RANDOM;	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
        end	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
        reg_group_0 = _RANDOM[5'h0];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_1 = _RANDOM[5'h1];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_2 = _RANDOM[5'h2];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_3 = _RANDOM[5'h3];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_4 = _RANDOM[5'h4];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_5 = _RANDOM[5'h5];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_6 = _RANDOM[5'h6];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_7 = _RANDOM[5'h7];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_8 = _RANDOM[5'h8];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_9 = _RANDOM[5'h9];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_10 = _RANDOM[5'hA];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_11 = _RANDOM[5'hB];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_12 = _RANDOM[5'hC];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_13 = _RANDOM[5'hD];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_14 = _RANDOM[5'hE];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_15 = _RANDOM[5'hF];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_16 = _RANDOM[5'h10];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_17 = _RANDOM[5'h11];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_18 = _RANDOM[5'h12];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_19 = _RANDOM[5'h13];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_20 = _RANDOM[5'h14];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_21 = _RANDOM[5'h15];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_22 = _RANDOM[5'h16];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_23 = _RANDOM[5'h17];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_24 = _RANDOM[5'h18];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_25 = _RANDOM[5'h19];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_26 = _RANDOM[5'h1A];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_27 = _RANDOM[5'h1B];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_28 = _RANDOM[5'h1C];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_29 = _RANDOM[5'h1D];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_30 = _RANDOM[5'h1E];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
        reg_group_31 = _RANDOM[5'h1F];	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :7:28]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/CPU/GenericRegisterGroup.scala:4:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_rj_data = (|io_rj_addr) ? casez_tmp : 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :8:{22,33}]
  assign io_rk_data = (|io_rk_addr) ? casez_tmp_0 : 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :9:{22,33}]
  assign io_rd_data_out = (|io_rd_addr_out) ? casez_tmp_1 : 32'h0;	// @[src/main/CPU/GenericRegisterGroup.scala:4:7, :10:{26,41}]
endmodule

module Read_GRG(	// @[src/main/CPU/Read_GRG.scala:8:7]
  output [31:0] io_out_rj,	// @[src/main/CPU/Read_GRG.scala:9:16]
                io_out_rk,	// @[src/main/CPU/Read_GRG.scala:9:16]
                io_out_rd,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [31:0] io_GRG_rj_in,	// @[src/main/CPU/Read_GRG.scala:9:16]
                io_GRG_rk_in,	// @[src/main/CPU/Read_GRG.scala:9:16]
                io_GRG_rd_in,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [4:0]  io_rj_addr,	// @[src/main/CPU/Read_GRG.scala:9:16]
                io_rk_addr,	// @[src/main/CPU/Read_GRG.scala:9:16]
                io_rd_addr,	// @[src/main/CPU/Read_GRG.scala:9:16]
                io_Exec_wb_rd_addr,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input         io_Exec_wb_rd_en,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [31:0] io_Exec_ALU_data,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [1:0]  io_Exec_GRGDataSel_option,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [31:0] io_Exec_now_pc,	// @[src/main/CPU/Read_GRG.scala:9:16]
                io_MemoryAccess_ALU_data,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [4:0]  io_MemoryAccess_wb_rd_addr,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input         io_MemoryAccess_wb_rd_en,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [31:0] io_MemoryAccess_MEM_data,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [1:0]  io_MemoryAccess_GRGDataSel_option,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [31:0] io_MemoryAccess_now_pc,	// @[src/main/CPU/Read_GRG.scala:9:16]
                io_WB_ALU_data,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [4:0]  io_WB_wb_rd_addr,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input         io_WB_wb_rd_en,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [31:0] io_WB_MEM_data,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [1:0]  io_WB_mem_GRGDataSel_option,	// @[src/main/CPU/Read_GRG.scala:9:16]
  input  [31:0] io_WB_now_pc	// @[src/main/CPU/Read_GRG.scala:9:16]
);

  wire [31:0] _rd_result_T_1 = io_WB_now_pc + 32'h4;	// @[src/main/CPU/Read_GRG.scala:17:56]
  reg  [31:0] casez_tmp;	// @[src/main/CPU/Read_GRG.scala:14:114]
  always_comb begin	// @[src/main/CPU/Read_GRG.scala:14:114]
    casez (io_WB_mem_GRGDataSel_option)	// @[src/main/CPU/Read_GRG.scala:14:114]
      2'b00:
        casez_tmp = io_WB_ALU_data;	// @[src/main/CPU/Read_GRG.scala:14:114]
      2'b01:
        casez_tmp = io_GRG_rj_in;	// @[src/main/CPU/Read_GRG.scala:14:114]
      2'b10:
        casez_tmp = io_WB_MEM_data;	// @[src/main/CPU/Read_GRG.scala:14:114]
      default:
        casez_tmp = _rd_result_T_1;	// @[src/main/CPU/Read_GRG.scala:14:114, :17:56]
    endcase	// @[src/main/CPU/Read_GRG.scala:14:114]
  end // always_comb
  wire [31:0] _rd_result_T_11 = io_MemoryAccess_now_pc + 32'h4;	// @[src/main/CPU/Read_GRG.scala:22:66]
  reg  [31:0] casez_tmp_0;	// @[src/main/CPU/Read_GRG.scala:19:140]
  always_comb begin	// @[src/main/CPU/Read_GRG.scala:19:140]
    casez (io_MemoryAccess_GRGDataSel_option)	// @[src/main/CPU/Read_GRG.scala:19:140]
      2'b00:
        casez_tmp_0 = io_MemoryAccess_ALU_data;	// @[src/main/CPU/Read_GRG.scala:19:140]
      2'b01:
        casez_tmp_0 = io_GRG_rj_in;	// @[src/main/CPU/Read_GRG.scala:19:140]
      2'b10:
        casez_tmp_0 = io_MemoryAccess_MEM_data;	// @[src/main/CPU/Read_GRG.scala:19:140]
      default:
        casez_tmp_0 = _rd_result_T_11;	// @[src/main/CPU/Read_GRG.scala:19:140, :22:66]
    endcase	// @[src/main/CPU/Read_GRG.scala:19:140]
  end // always_comb
  wire [31:0] _rd_result_T_21 = io_Exec_now_pc + 32'h4;	// @[src/main/CPU/Read_GRG.scala:26:57]
  wire        _rd_result_T_23 = io_Exec_GRGDataSel_option == 2'h0;	// @[src/main/CPU/Read_GRG.scala:14:114, :24:116]
  reg  [31:0] casez_tmp_1;	// @[src/main/CPU/Read_GRG.scala:31:113]
  always_comb begin	// @[src/main/CPU/Read_GRG.scala:14:114, :31:113]
    casez (io_WB_mem_GRGDataSel_option)	// @[src/main/CPU/Read_GRG.scala:14:114, :31:113]
      2'b00:
        casez_tmp_1 = io_WB_ALU_data;	// @[src/main/CPU/Read_GRG.scala:14:114, :31:113]
      2'b01:
        casez_tmp_1 = io_GRG_rk_in;	// @[src/main/CPU/Read_GRG.scala:14:114, :31:113]
      2'b10:
        casez_tmp_1 = io_WB_MEM_data;	// @[src/main/CPU/Read_GRG.scala:14:114, :31:113]
      default:
        casez_tmp_1 = _rd_result_T_1;	// @[src/main/CPU/Read_GRG.scala:14:114, :17:56, :31:113]
    endcase	// @[src/main/CPU/Read_GRG.scala:14:114, :31:113]
  end // always_comb
  reg  [31:0] casez_tmp_2;	// @[src/main/CPU/Read_GRG.scala:36:139]
  always_comb begin	// @[src/main/CPU/Read_GRG.scala:19:140, :36:139]
    casez (io_MemoryAccess_GRGDataSel_option)	// @[src/main/CPU/Read_GRG.scala:19:140, :36:139]
      2'b00:
        casez_tmp_2 = io_MemoryAccess_ALU_data;	// @[src/main/CPU/Read_GRG.scala:19:140, :36:139]
      2'b01:
        casez_tmp_2 = io_GRG_rk_in;	// @[src/main/CPU/Read_GRG.scala:19:140, :36:139]
      2'b10:
        casez_tmp_2 = io_MemoryAccess_MEM_data;	// @[src/main/CPU/Read_GRG.scala:19:140, :36:139]
      default:
        casez_tmp_2 = _rd_result_T_11;	// @[src/main/CPU/Read_GRG.scala:19:140, :22:66, :36:139]
    endcase	// @[src/main/CPU/Read_GRG.scala:19:140, :36:139]
  end // always_comb
  reg  [31:0] casez_tmp_3;	// @[src/main/CPU/Read_GRG.scala:49:113]
  always_comb begin	// @[src/main/CPU/Read_GRG.scala:14:114, :49:113]
    casez (io_WB_mem_GRGDataSel_option)	// @[src/main/CPU/Read_GRG.scala:14:114, :49:113]
      2'b00:
        casez_tmp_3 = io_WB_ALU_data;	// @[src/main/CPU/Read_GRG.scala:14:114, :49:113]
      2'b01:
        casez_tmp_3 = io_GRG_rd_in;	// @[src/main/CPU/Read_GRG.scala:14:114, :49:113]
      2'b10:
        casez_tmp_3 = io_WB_MEM_data;	// @[src/main/CPU/Read_GRG.scala:14:114, :49:113]
      default:
        casez_tmp_3 = _rd_result_T_1;	// @[src/main/CPU/Read_GRG.scala:14:114, :17:56, :49:113]
    endcase	// @[src/main/CPU/Read_GRG.scala:14:114, :49:113]
  end // always_comb
  reg  [31:0] casez_tmp_4;	// @[src/main/CPU/Read_GRG.scala:54:139]
  always_comb begin	// @[src/main/CPU/Read_GRG.scala:19:140, :54:139]
    casez (io_MemoryAccess_GRGDataSel_option)	// @[src/main/CPU/Read_GRG.scala:19:140, :54:139]
      2'b00:
        casez_tmp_4 = io_MemoryAccess_ALU_data;	// @[src/main/CPU/Read_GRG.scala:19:140, :54:139]
      2'b01:
        casez_tmp_4 = io_GRG_rd_in;	// @[src/main/CPU/Read_GRG.scala:19:140, :54:139]
      2'b10:
        casez_tmp_4 = io_MemoryAccess_MEM_data;	// @[src/main/CPU/Read_GRG.scala:19:140, :54:139]
      default:
        casez_tmp_4 = _rd_result_T_11;	// @[src/main/CPU/Read_GRG.scala:19:140, :22:66, :54:139]
    endcase	// @[src/main/CPU/Read_GRG.scala:19:140, :54:139]
  end // always_comb
  assign io_out_rj =
    io_Exec_wb_rd_addr == io_rj_addr
      ? (io_Exec_wb_rd_en
           ? ((&io_Exec_GRGDataSel_option)
                ? _rd_result_T_21
                : _rd_result_T_23 ? io_Exec_ALU_data : io_GRG_rj_in)
           : io_GRG_rj_in)
      : io_MemoryAccess_wb_rd_addr == io_rj_addr
          ? (io_MemoryAccess_wb_rd_en ? casez_tmp_0 : io_GRG_rj_in)
          : io_WB_wb_rd_addr == io_rj_addr & io_WB_wb_rd_en ? casez_tmp : io_GRG_rj_in;	// @[src/main/CPU/Read_GRG.scala:8:7, :13:55, :14:114, :19:{42,140}, :24:{34,116}, :26:57]
  assign io_out_rk =
    io_Exec_wb_rd_addr == io_rk_addr
      ? (io_Exec_wb_rd_en
           ? ((&io_Exec_GRGDataSel_option)
                ? _rd_result_T_21
                : _rd_result_T_23 ? io_Exec_ALU_data : io_GRG_rk_in)
           : io_GRG_rk_in)
      : io_MemoryAccess_wb_rd_addr == io_rk_addr
          ? (io_MemoryAccess_wb_rd_en ? casez_tmp_2 : io_GRG_rk_in)
          : io_WB_wb_rd_addr == io_rk_addr & io_WB_wb_rd_en ? casez_tmp_1 : io_GRG_rk_in;	// @[src/main/CPU/Read_GRG.scala:8:7, :24:116, :26:57, :30:56, :31:113, :36:{42,139}, :41:{34,115}]
  assign io_out_rd =
    io_Exec_wb_rd_addr == io_rd_addr
      ? (io_Exec_wb_rd_en
           ? ((&io_Exec_GRGDataSel_option)
                ? _rd_result_T_21
                : _rd_result_T_23 ? io_Exec_ALU_data : io_GRG_rd_in)
           : io_GRG_rd_in)
      : io_MemoryAccess_wb_rd_addr == io_rd_addr
          ? (io_MemoryAccess_wb_rd_en ? casez_tmp_4 : io_GRG_rd_in)
          : io_WB_wb_rd_addr == io_rd_addr & io_WB_wb_rd_en ? casez_tmp_3 : io_GRG_rd_in;	// @[src/main/CPU/Read_GRG.scala:8:7, :24:116, :26:57, :46:56, :49:113, :54:{42,139}, :59:{34,115}]
endmodule

module DecodeToExec(	// @[src/main/CPU/DecodeToExec.scala:4:7]
  input         clock,	// @[src/main/CPU/DecodeToExec.scala:4:7]
                reset,	// @[src/main/CPU/DecodeToExec.scala:4:7]
  output        io_in_ready,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  input         io_in_valid,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  input  [3:0]  io_in_bits_alu_option,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  input  [2:0]  io_in_bits_MemoryAccess_option,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  input  [1:0]  io_in_bits_GRGDataSel_option,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_in_bits_alu_a_sel,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_in_bits_alu_b_sel,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  input         io_in_bits_ram_r,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_in_bits_ram_w,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  input  [31:0] io_in_bits_Out_Eximm,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_in_bits_rj_data,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_in_bits_rk_data,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_in_bits_rd_data_out,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_in_bits_now_pc,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  input         io_in_bits_if_Jump,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  input  [4:0]  io_in_bits_rd_addr,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  input         io_in_bits_rd_en,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  input  [31:0] io_in_bits_var_pc_addr,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  output        io_out_valid,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  output [3:0]  io_out_bits_alu_option,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  output [2:0]  io_out_bits_MemoryAccess_option,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  output [1:0]  io_out_bits_GRGDataSel_option,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_out_bits_alu_a_sel,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_out_bits_alu_b_sel,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  output        io_out_bits_ram_r,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_out_bits_ram_w,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  output [31:0] io_out_bits_Out_Eximm,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_out_bits_rj_data,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_out_bits_rk_data,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_out_bits_rd_data_out,	// @[src/main/CPU/DecodeToExec.scala:5:16]
                io_out_bits_now_pc,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  output        io_out_bits_if_Jump,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  output [4:0]  io_out_bits_rd_addr,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  output        io_out_bits_rd_en,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  output [31:0] io_out_bits_var_pc_addr,	// @[src/main/CPU/DecodeToExec.scala:5:16]
  input         io_if_var_pc_Conflict	// @[src/main/CPU/DecodeToExec.scala:5:16]
);

  reg        DecodeToExec_valid;	// @[src/main/CPU/DecodeToExec.scala:11:37]
  reg [2:0]  ld_data_Conflict_state;	// @[src/main/CPU/DecodeToExec.scala:16:41]
  reg [3:0]  DecodeToExec_reg_alu_option;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg [2:0]  DecodeToExec_reg_MemoryAccess_option;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg [1:0]  DecodeToExec_reg_GRGDataSel_option;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg [1:0]  DecodeToExec_reg_alu_a_sel;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg [1:0]  DecodeToExec_reg_alu_b_sel;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg        DecodeToExec_reg_ram_r;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg        DecodeToExec_reg_ram_w;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg [31:0] DecodeToExec_reg_Out_Eximm;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg [31:0] DecodeToExec_reg_rj_data;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg [31:0] DecodeToExec_reg_rk_data;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg [31:0] DecodeToExec_reg_rd_data_out;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg [31:0] DecodeToExec_reg_now_pc;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg        DecodeToExec_reg_if_Jump;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg [4:0]  DecodeToExec_reg_rd_addr;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg        DecodeToExec_reg_rd_en;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  reg [31:0] DecodeToExec_reg_var_pc_addr;	// @[src/main/CPU/DecodeToExec.scala:46:37]
  always @(posedge clock) begin	// @[src/main/CPU/DecodeToExec.scala:4:7]
    if (reset) begin	// @[src/main/CPU/DecodeToExec.scala:4:7]
      DecodeToExec_valid <= 1'h0;	// @[src/main/CPU/DecodeToExec.scala:11:37]
      ld_data_Conflict_state <= 3'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :16:41]
      DecodeToExec_reg_alu_option <= 4'h0;	// @[src/main/CPU/DecodeToExec.scala:27:38, :46:37]
      DecodeToExec_reg_MemoryAccess_option <= 3'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :46:37]
      DecodeToExec_reg_GRGDataSel_option <= 2'h0;	// @[src/main/CPU/DecodeToExec.scala:46:37]
      DecodeToExec_reg_alu_a_sel <= 2'h0;	// @[src/main/CPU/DecodeToExec.scala:46:37]
      DecodeToExec_reg_alu_b_sel <= 2'h0;	// @[src/main/CPU/DecodeToExec.scala:46:37]
      DecodeToExec_reg_ram_r <= 1'h0;	// @[src/main/CPU/DecodeToExec.scala:46:37]
      DecodeToExec_reg_ram_w <= 1'h0;	// @[src/main/CPU/DecodeToExec.scala:46:37]
      DecodeToExec_reg_Out_Eximm <= 32'h0;	// @[src/main/CPU/DecodeToExec.scala:34:37, :46:37]
      DecodeToExec_reg_rj_data <= 32'h0;	// @[src/main/CPU/DecodeToExec.scala:34:37, :46:37]
      DecodeToExec_reg_rk_data <= 32'h0;	// @[src/main/CPU/DecodeToExec.scala:34:37, :46:37]
      DecodeToExec_reg_rd_data_out <= 32'h0;	// @[src/main/CPU/DecodeToExec.scala:34:37, :46:37]
      DecodeToExec_reg_now_pc <= 32'h0;	// @[src/main/CPU/DecodeToExec.scala:34:37, :46:37]
      DecodeToExec_reg_if_Jump <= 1'h0;	// @[src/main/CPU/DecodeToExec.scala:46:37]
      DecodeToExec_reg_rd_addr <= 5'h0;	// @[src/main/CPU/DecodeToExec.scala:40:35, :46:37]
      DecodeToExec_reg_rd_en <= 1'h0;	// @[src/main/CPU/DecodeToExec.scala:46:37]
      DecodeToExec_reg_var_pc_addr <= 32'h0;	// @[src/main/CPU/DecodeToExec.scala:34:37, :46:37]
    end
    else begin	// @[src/main/CPU/DecodeToExec.scala:4:7]
      if (~(|ld_data_Conflict_state)) begin	// @[src/main/CPU/DecodeToExec.scala:16:41, :19:100]
        DecodeToExec_valid <= io_in_valid & io_if_var_pc_Conflict;	// @[src/main/CPU/DecodeToExec.scala:11:37, :20:62]
        DecodeToExec_reg_alu_option <= io_in_bits_alu_option;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_MemoryAccess_option <= io_in_bits_MemoryAccess_option;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_GRGDataSel_option <= io_in_bits_GRGDataSel_option;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_alu_a_sel <= io_in_bits_alu_a_sel;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_alu_b_sel <= io_in_bits_alu_b_sel;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_ram_r <= io_in_bits_ram_r;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_ram_w <= io_in_bits_ram_w;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_Out_Eximm <= io_in_bits_Out_Eximm;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_rj_data <= io_in_bits_rj_data;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_rk_data <= io_in_bits_rk_data;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_rd_data_out <= io_in_bits_rd_data_out;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_now_pc <= io_in_bits_now_pc;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_if_Jump <= io_in_bits_if_Jump;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_rd_addr <= io_in_bits_rd_addr;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_rd_en <= io_in_bits_rd_en;	// @[src/main/CPU/DecodeToExec.scala:46:37]
        DecodeToExec_reg_var_pc_addr <= io_in_bits_var_pc_addr;	// @[src/main/CPU/DecodeToExec.scala:46:37]
      end
      if (ld_data_Conflict_state == 3'h4 | ld_data_Conflict_state == 3'h3)	// @[src/main/CPU/DecodeToExec.scala:4:7, :16:41, :52:71]
        ld_data_Conflict_state <= 3'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :16:41]
      else if (ld_data_Conflict_state == 3'h2)	// @[src/main/CPU/DecodeToExec.scala:4:7, :16:41, :52:71]
        ld_data_Conflict_state <= 3'h3;	// @[src/main/CPU/DecodeToExec.scala:4:7, :16:41]
      else if (ld_data_Conflict_state == 3'h1)	// @[src/main/CPU/DecodeToExec.scala:4:7, :16:41, :52:71]
        ld_data_Conflict_state <= 3'h2;	// @[src/main/CPU/DecodeToExec.scala:4:7, :16:41]
      else	// @[src/main/CPU/DecodeToExec.scala:52:71]
        ld_data_Conflict_state <=
          {2'h0, ld_data_Conflict_state == 3'h0 & (io_in_bits_ram_r | io_in_bits_ram_w)};	// @[src/main/CPU/DecodeToExec.scala:4:7, :16:41, :51:48, :52:71, :54:26]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/CPU/DecodeToExec.scala:4:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/CPU/DecodeToExec.scala:4:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/CPU/DecodeToExec.scala:4:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:6];	// @[src/main/CPU/DecodeToExec.scala:4:7]
    initial begin	// @[src/main/CPU/DecodeToExec.scala:4:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/CPU/DecodeToExec.scala:4:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/CPU/DecodeToExec.scala:4:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/CPU/DecodeToExec.scala:4:7]
        for (logic [2:0] i = 3'h0; i < 3'h7; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// @[src/main/CPU/DecodeToExec.scala:4:7]
        end	// @[src/main/CPU/DecodeToExec.scala:4:7]
        DecodeToExec_valid = _RANDOM[3'h0][0];	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37]
        ld_data_Conflict_state = _RANDOM[3'h0][3:1];	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :16:41]
        DecodeToExec_reg_alu_option = _RANDOM[3'h0][7:4];	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37]
        DecodeToExec_reg_MemoryAccess_option = _RANDOM[3'h0][10:8];	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37]
        DecodeToExec_reg_GRGDataSel_option = _RANDOM[3'h0][12:11];	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37]
        DecodeToExec_reg_alu_a_sel = _RANDOM[3'h0][14:13];	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37]
        DecodeToExec_reg_alu_b_sel = _RANDOM[3'h0][16:15];	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37]
        DecodeToExec_reg_ram_r = _RANDOM[3'h0][19];	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37]
        DecodeToExec_reg_ram_w = _RANDOM[3'h0][20];	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37]
        DecodeToExec_reg_Out_Eximm = {_RANDOM[3'h0][31:21], _RANDOM[3'h1][20:0]};	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37]
        DecodeToExec_reg_rj_data = {_RANDOM[3'h1][31:21], _RANDOM[3'h2][20:0]};	// @[src/main/CPU/DecodeToExec.scala:4:7, :46:37]
        DecodeToExec_reg_rk_data = {_RANDOM[3'h2][31:21], _RANDOM[3'h3][20:0]};	// @[src/main/CPU/DecodeToExec.scala:4:7, :46:37]
        DecodeToExec_reg_rd_data_out = {_RANDOM[3'h3][31:21], _RANDOM[3'h4][20:0]};	// @[src/main/CPU/DecodeToExec.scala:4:7, :46:37]
        DecodeToExec_reg_now_pc = {_RANDOM[3'h4][31:21], _RANDOM[3'h5][20:0]};	// @[src/main/CPU/DecodeToExec.scala:4:7, :46:37]
        DecodeToExec_reg_if_Jump = _RANDOM[3'h5][21];	// @[src/main/CPU/DecodeToExec.scala:4:7, :46:37]
        DecodeToExec_reg_rd_addr = _RANDOM[3'h5][26:22];	// @[src/main/CPU/DecodeToExec.scala:4:7, :46:37]
        DecodeToExec_reg_rd_en = _RANDOM[3'h5][27];	// @[src/main/CPU/DecodeToExec.scala:4:7, :46:37]
        DecodeToExec_reg_var_pc_addr = {_RANDOM[3'h5][31:28], _RANDOM[3'h6][27:0]};	// @[src/main/CPU/DecodeToExec.scala:4:7, :46:37]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/CPU/DecodeToExec.scala:4:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/CPU/DecodeToExec.scala:4:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_in_ready = ~(|ld_data_Conflict_state);	// @[src/main/CPU/DecodeToExec.scala:4:7, :16:41, :19:100, :21:70]
  assign io_out_valid = DecodeToExec_valid;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37]
  assign io_out_bits_alu_option = DecodeToExec_valid ? DecodeToExec_reg_alu_option : 4'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :27:38, :46:37, :47:23]
  assign io_out_bits_MemoryAccess_option =
    DecodeToExec_valid ? DecodeToExec_reg_MemoryAccess_option : 3'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37, :47:23]
  assign io_out_bits_GRGDataSel_option =
    DecodeToExec_valid ? DecodeToExec_reg_GRGDataSel_option : 2'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37, :47:23]
  assign io_out_bits_alu_a_sel = DecodeToExec_valid ? DecodeToExec_reg_alu_a_sel : 2'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37, :47:23]
  assign io_out_bits_alu_b_sel = DecodeToExec_valid ? DecodeToExec_reg_alu_b_sel : 2'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37, :47:23]
  assign io_out_bits_ram_r = DecodeToExec_valid & DecodeToExec_reg_ram_r;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37, :47:23]
  assign io_out_bits_ram_w = DecodeToExec_valid & DecodeToExec_reg_ram_w;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37, :47:23]
  assign io_out_bits_Out_Eximm = DecodeToExec_valid ? DecodeToExec_reg_Out_Eximm : 32'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :34:37, :46:37, :47:23]
  assign io_out_bits_rj_data = DecodeToExec_valid ? DecodeToExec_reg_rj_data : 32'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :34:37, :46:37, :47:23]
  assign io_out_bits_rk_data = DecodeToExec_valid ? DecodeToExec_reg_rk_data : 32'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :34:37, :46:37, :47:23]
  assign io_out_bits_rd_data_out =
    DecodeToExec_valid ? DecodeToExec_reg_rd_data_out : 32'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :34:37, :46:37, :47:23]
  assign io_out_bits_now_pc = DecodeToExec_valid ? DecodeToExec_reg_now_pc : 32'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :34:37, :46:37, :47:23]
  assign io_out_bits_if_Jump = DecodeToExec_valid & DecodeToExec_reg_if_Jump;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37, :47:23]
  assign io_out_bits_rd_addr = DecodeToExec_valid ? DecodeToExec_reg_rd_addr : 5'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :40:35, :46:37, :47:23]
  assign io_out_bits_rd_en = DecodeToExec_valid & DecodeToExec_reg_rd_en;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :46:37, :47:23]
  assign io_out_bits_var_pc_addr =
    DecodeToExec_valid ? DecodeToExec_reg_var_pc_addr : 32'h0;	// @[src/main/CPU/DecodeToExec.scala:4:7, :11:37, :34:37, :46:37, :47:23]
endmodule

module ALUDataSel(	// @[src/main/CPU/ALUDataSel.scala:7:7]
  input  [1:0]  io_alu_a_sel,	// @[src/main/CPU/ALUDataSel.scala:8:16]
                io_alu_b_sel,	// @[src/main/CPU/ALUDataSel.scala:8:16]
  input  [31:0] io_imm_data,	// @[src/main/CPU/ALUDataSel.scala:8:16]
                io_rj_data,	// @[src/main/CPU/ALUDataSel.scala:8:16]
                io_rk_data,	// @[src/main/CPU/ALUDataSel.scala:8:16]
                io_now_pc,	// @[src/main/CPU/ALUDataSel.scala:8:16]
  output [31:0] io_alu_a_data,	// @[src/main/CPU/ALUDataSel.scala:8:16]
                io_alu_b_data	// @[src/main/CPU/ALUDataSel.scala:8:16]
);

  assign io_alu_a_data = io_alu_a_sel == 2'h1 ? io_now_pc : io_rj_data;	// @[src/main/CPU/ALUDataSel.scala:7:7, :10:63]
  assign io_alu_b_data = io_alu_b_sel == 2'h1 ? io_imm_data : io_rk_data;	// @[src/main/CPU/ALUDataSel.scala:7:7, :17:63]
endmodule

module ALU(	// @[src/main/CPU/ALU.scala:6:7]
  input  [31:0] io_in_data1,	// @[src/main/CPU/ALU.scala:7:14]
                io_in_data2,	// @[src/main/CPU/ALU.scala:7:14]
  input  [3:0]  io_alu_option,	// @[src/main/CPU/ALU.scala:7:14]
  output [31:0] io_out_data	// @[src/main/CPU/ALU.scala:7:14]
);

  reg  [31:0] casez_tmp;	// @[src/main/CPU/ALU.scala:22:63]
  wire [62:0] alu_result_sll = {31'h0, io_in_data1} << io_in_data2[4:0];	// @[src/main/CPU/ALU.scala:16:{45,66}]
  always_comb begin	// @[src/main/CPU/ALU.scala:22:63]
    casez (io_alu_option)	// @[src/main/CPU/ALU.scala:22:63]
      4'b0000:
        casez_tmp = io_in_data2;	// @[src/main/CPU/ALU.scala:22:63]
      4'b0001:
        casez_tmp = io_in_data1 + io_in_data2;	// @[src/main/CPU/ALU.scala:11:44, :22:63]
      4'b0010:
        casez_tmp = io_in_data1 - io_in_data2;	// @[src/main/CPU/ALU.scala:12:44, :22:63]
      4'b0011:
        casez_tmp = io_in_data1 | io_in_data2;	// @[src/main/CPU/ALU.scala:13:36, :22:63]
      4'b0100:
        casez_tmp = io_in_data1 ^ io_in_data2;	// @[src/main/CPU/ALU.scala:15:37, :22:63]
      4'b0101:
        casez_tmp = io_in_data1 & io_in_data2;	// @[src/main/CPU/ALU.scala:14:37, :22:63]
      4'b0110:
        casez_tmp = io_in_data1 >> io_in_data2[4:0];	// @[src/main/CPU/ALU.scala:16:66, :17:44, :22:63]
      4'b0111:
        casez_tmp = alu_result_sll[31:0];	// @[src/main/CPU/ALU.scala:16:45, :22:63]
      4'b1000:
        casez_tmp = io_in_data1 * io_in_data2;	// @[src/main/CPU/ALU.scala:20:45, :22:63]
      4'b1001:
        casez_tmp = {31'h0, $signed(io_in_data1) < $signed(io_in_data2)};	// @[src/main/CPU/ALU.scala:21:48, :22:63]
      4'b1010:
        casez_tmp = 32'h0;	// @[src/main/CPU/ALU.scala:22:63]
      4'b1011:
        casez_tmp = 32'h0;	// @[src/main/CPU/ALU.scala:22:63]
      4'b1100:
        casez_tmp = 32'h0;	// @[src/main/CPU/ALU.scala:22:63]
      4'b1101:
        casez_tmp = 32'h0;	// @[src/main/CPU/ALU.scala:22:63]
      4'b1110:
        casez_tmp = 32'h0;	// @[src/main/CPU/ALU.scala:22:63]
      default:
        casez_tmp = 32'h0;	// @[src/main/CPU/ALU.scala:22:63]
    endcase	// @[src/main/CPU/ALU.scala:22:63]
  end // always_comb
  assign io_out_data = casez_tmp;	// @[src/main/CPU/ALU.scala:6:7, :22:63]
endmodule

module ExecToMemoryAccess(	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
  input         clock,	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
                reset,	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
                io_in_valid,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  input  [2:0]  io_in_bits_MemoryAccess_option,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  input  [31:0] io_in_bits_alu_out_data,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  input         io_in_bits_ram_r,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
                io_in_bits_ram_w,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  input  [1:0]  io_in_bits_GRGDataSel_option,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  input  [31:0] io_in_bits_rd_data_out,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  input  [4:0]  io_in_bits_rd_addr,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  input         io_in_bits_rd_en,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  input  [31:0] io_in_bits_now_pc,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  output        io_out_valid,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  output [2:0]  io_out_bits_MemoryAccess_option,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  output [31:0] io_out_bits_alu_out_data,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  output        io_out_bits_ram_r,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
                io_out_bits_ram_w,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  output [1:0]  io_out_bits_GRGDataSel_option,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  output [31:0] io_out_bits_rd_data_out,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  output [4:0]  io_out_bits_rd_addr,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  output        io_out_bits_rd_en,	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
  output [31:0] io_out_bits_now_pc	// @[src/main/CPU/ExecToMemoryAccess.scala:5:16]
);

  reg        ExecToMemoryAccess_valid;	// @[src/main/CPU/ExecToMemoryAccess.scala:9:43]
  reg [2:0]  ExecToMemoryAccess_reg_MemoryAccess_option;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
  reg [31:0] ExecToMemoryAccess_reg_alu_out_data;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
  reg        ExecToMemoryAccess_reg_ram_r;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
  reg        ExecToMemoryAccess_reg_ram_w;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
  reg [1:0]  ExecToMemoryAccess_reg_GRGDataSel_option;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
  reg [31:0] ExecToMemoryAccess_reg_rd_data_out;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
  reg [4:0]  ExecToMemoryAccess_reg_rd_addr;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
  reg        ExecToMemoryAccess_reg_rd_en;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
  reg [31:0] ExecToMemoryAccess_reg_now_pc;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
  always @(posedge clock) begin	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
    if (reset) begin	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
      ExecToMemoryAccess_valid <= 1'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:9:43]
      ExecToMemoryAccess_reg_MemoryAccess_option <= 3'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :34:43]
      ExecToMemoryAccess_reg_alu_out_data <= 32'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:22:46, :34:43]
      ExecToMemoryAccess_reg_ram_r <= 1'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
      ExecToMemoryAccess_reg_ram_w <= 1'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
      ExecToMemoryAccess_reg_GRGDataSel_option <= 2'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :34:43]
      ExecToMemoryAccess_reg_rd_data_out <= 32'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:22:46, :34:43]
      ExecToMemoryAccess_reg_rd_addr <= 5'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:29:41, :34:43]
      ExecToMemoryAccess_reg_rd_en <= 1'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
      ExecToMemoryAccess_reg_now_pc <= 32'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:22:46, :34:43]
    end
    else begin	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
      ExecToMemoryAccess_valid <= io_in_valid;	// @[src/main/CPU/ExecToMemoryAccess.scala:9:43]
      ExecToMemoryAccess_reg_MemoryAccess_option <= io_in_bits_MemoryAccess_option;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
      ExecToMemoryAccess_reg_alu_out_data <= io_in_bits_alu_out_data;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
      ExecToMemoryAccess_reg_ram_r <= io_in_bits_ram_r;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
      ExecToMemoryAccess_reg_ram_w <= io_in_bits_ram_w;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
      ExecToMemoryAccess_reg_GRGDataSel_option <= io_in_bits_GRGDataSel_option;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
      ExecToMemoryAccess_reg_rd_data_out <= io_in_bits_rd_data_out;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
      ExecToMemoryAccess_reg_rd_addr <= io_in_bits_rd_addr;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
      ExecToMemoryAccess_reg_rd_en <= io_in_bits_rd_en;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
      ExecToMemoryAccess_reg_now_pc <= io_in_bits_now_pc;	// @[src/main/CPU/ExecToMemoryAccess.scala:34:43]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
    initial begin	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
        end	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
        ExecToMemoryAccess_valid = _RANDOM[2'h0][0];	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43]
        ExecToMemoryAccess_reg_MemoryAccess_option = _RANDOM[2'h0][3:1];	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43, :34:43]
        ExecToMemoryAccess_reg_alu_out_data = {_RANDOM[2'h0][31:4], _RANDOM[2'h1][3:0]};	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43, :34:43]
        ExecToMemoryAccess_reg_ram_r = _RANDOM[2'h1][6];	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :34:43]
        ExecToMemoryAccess_reg_ram_w = _RANDOM[2'h1][7];	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :34:43]
        ExecToMemoryAccess_reg_GRGDataSel_option = _RANDOM[2'h1][9:8];	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :34:43]
        ExecToMemoryAccess_reg_rd_data_out = {_RANDOM[2'h1][31:10], _RANDOM[2'h2][9:0]};	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :34:43]
        ExecToMemoryAccess_reg_rd_addr = _RANDOM[2'h2][15:11];	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :34:43]
        ExecToMemoryAccess_reg_rd_en = _RANDOM[2'h2][16];	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :34:43]
        ExecToMemoryAccess_reg_now_pc = {_RANDOM[2'h2][31:17], _RANDOM[2'h3][16:0]};	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :34:43]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_valid = ExecToMemoryAccess_valid;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43]
  assign io_out_bits_MemoryAccess_option =
    ExecToMemoryAccess_valid ? ExecToMemoryAccess_reg_MemoryAccess_option : 3'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43, :34:43, :35:23]
  assign io_out_bits_alu_out_data =
    ExecToMemoryAccess_valid ? ExecToMemoryAccess_reg_alu_out_data : 32'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43, :22:46, :34:43, :35:23]
  assign io_out_bits_ram_r = ExecToMemoryAccess_valid & ExecToMemoryAccess_reg_ram_r;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43, :34:43, :35:23]
  assign io_out_bits_ram_w = ExecToMemoryAccess_valid & ExecToMemoryAccess_reg_ram_w;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43, :34:43, :35:23]
  assign io_out_bits_GRGDataSel_option =
    ExecToMemoryAccess_valid ? ExecToMemoryAccess_reg_GRGDataSel_option : 2'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43, :34:43, :35:23]
  assign io_out_bits_rd_data_out =
    ExecToMemoryAccess_valid ? ExecToMemoryAccess_reg_rd_data_out : 32'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43, :22:46, :34:43, :35:23]
  assign io_out_bits_rd_addr =
    ExecToMemoryAccess_valid ? ExecToMemoryAccess_reg_rd_addr : 5'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43, :29:41, :34:43, :35:23]
  assign io_out_bits_rd_en = ExecToMemoryAccess_valid & ExecToMemoryAccess_reg_rd_en;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43, :34:43, :35:23]
  assign io_out_bits_now_pc =
    ExecToMemoryAccess_valid ? ExecToMemoryAccess_reg_now_pc : 32'h0;	// @[src/main/CPU/ExecToMemoryAccess.scala:4:7, :9:43, :22:46, :34:43, :35:23]
endmodule

module MemoryAccess(	// @[src/main/CPU/MemoryAccess.scala:7:7]
  output [3:0]  io_ram_be_n,	// @[src/main/CPU/MemoryAccess.scala:8:15]
  input  [2:0]  io_MemoryAccess_option,	// @[src/main/CPU/MemoryAccess.scala:8:15]
  input  [31:0] io_MemoryAccess_in,	// @[src/main/CPU/MemoryAccess.scala:8:15]
  output [31:0] io_MemoryAccess_out	// @[src/main/CPU/MemoryAccess.scala:8:15]
);

  reg [3:0] casez_tmp;	// @[src/main/CPU/MemoryAccess.scala:12:84]
  always_comb begin
    casez (io_MemoryAccess_in[1:0])	// @[src/main/CPU/MemoryAccess.scala:12:68]
      2'b00:
        casez_tmp = 4'hE;
      2'b01:
        casez_tmp = 4'hD;
      2'b10:
        casez_tmp = 4'hB;
      default:
        casez_tmp = 4'h7;
    endcase	// @[src/main/CPU/MemoryAccess.scala:12:68]
  end // always_comb
  assign io_ram_be_n =
    io_MemoryAccess_option == 3'h2 | io_MemoryAccess_option != 3'h1 ? 4'h0 : casez_tmp;	// @[src/main/CPU/MemoryAccess.scala:7:7, :10:70, :12:84]
  assign io_MemoryAccess_out = io_MemoryAccess_in;	// @[src/main/CPU/MemoryAccess.scala:7:7]
endmodule

module MemoryAccessToWB(	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
  input         clock,	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
                reset,	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
                io_in_valid,	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
  input  [1:0]  io_in_bits_GRGDataSel_option,	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
  input  [31:0] io_in_bits_alu_out_data,	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
                io_in_bits_MemoryAccess_out_data,	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
  input  [4:0]  io_in_bits_rd_addr,	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
  input         io_in_bits_rd_en,	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
  input  [31:0] io_in_bits_now_pc,	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
  output [1:0]  io_out_bits_GRGDataSel_option,	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
  output [31:0] io_out_bits_alu_out_data,	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
                io_out_bits_MemoryAccess_out_data,	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
  output [4:0]  io_out_bits_rd_addr,	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
  output        io_out_bits_rd_en,	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
  output [31:0] io_out_bits_now_pc	// @[src/main/CPU/MemoryAccessToWB.scala:5:16]
);

  reg        MemoryAccessToWB_valid;	// @[src/main/CPU/MemoryAccessToWB.scala:9:41]
  reg [1:0]  MemoryAccessToWB_reg_GRGDataSel_option;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
  reg [31:0] MemoryAccessToWB_reg_alu_out_data;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
  reg [31:0] MemoryAccessToWB_reg_MemoryAccess_out_data;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
  reg [4:0]  MemoryAccessToWB_reg_rd_addr;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
  reg        MemoryAccessToWB_reg_rd_en;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
  reg [31:0] MemoryAccessToWB_reg_now_pc;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
  always @(posedge clock) begin	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
    if (reset) begin	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
      MemoryAccessToWB_valid <= 1'h0;	// @[src/main/CPU/MemoryAccessToWB.scala:9:41]
      MemoryAccessToWB_reg_GRGDataSel_option <= 2'h0;	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :27:41]
      MemoryAccessToWB_reg_alu_out_data <= 32'h0;	// @[src/main/CPU/MemoryAccessToWB.scala:19:44, :27:41]
      MemoryAccessToWB_reg_MemoryAccess_out_data <= 32'h0;	// @[src/main/CPU/MemoryAccessToWB.scala:19:44, :27:41]
      MemoryAccessToWB_reg_rd_addr <= 5'h0;	// @[src/main/CPU/MemoryAccessToWB.scala:23:39, :27:41]
      MemoryAccessToWB_reg_rd_en <= 1'h0;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
      MemoryAccessToWB_reg_now_pc <= 32'h0;	// @[src/main/CPU/MemoryAccessToWB.scala:19:44, :27:41]
    end
    else begin	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
      MemoryAccessToWB_valid <= io_in_valid;	// @[src/main/CPU/MemoryAccessToWB.scala:9:41]
      MemoryAccessToWB_reg_GRGDataSel_option <= io_in_bits_GRGDataSel_option;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
      MemoryAccessToWB_reg_alu_out_data <= io_in_bits_alu_out_data;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
      MemoryAccessToWB_reg_MemoryAccess_out_data <= io_in_bits_MemoryAccess_out_data;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
      MemoryAccessToWB_reg_rd_addr <= io_in_bits_rd_addr;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
      MemoryAccessToWB_reg_rd_en <= io_in_bits_rd_en;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
      MemoryAccessToWB_reg_now_pc <= io_in_bits_now_pc;	// @[src/main/CPU/MemoryAccessToWB.scala:27:41]
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
    initial begin	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
        end	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
        MemoryAccessToWB_valid = _RANDOM[2'h0][0];	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :9:41]
        MemoryAccessToWB_reg_GRGDataSel_option = _RANDOM[2'h0][2:1];	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :9:41, :27:41]
        MemoryAccessToWB_reg_alu_out_data = {_RANDOM[2'h0][31:3], _RANDOM[2'h1][2:0]};	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :9:41, :27:41]
        MemoryAccessToWB_reg_MemoryAccess_out_data =
          {_RANDOM[2'h1][31:3], _RANDOM[2'h2][2:0]};	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :27:41]
        MemoryAccessToWB_reg_rd_addr = _RANDOM[2'h2][10:6];	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :27:41]
        MemoryAccessToWB_reg_rd_en = _RANDOM[2'h2][11];	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :27:41]
        MemoryAccessToWB_reg_now_pc = {_RANDOM[2'h2][31:12], _RANDOM[2'h3][11:0]};	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :27:41]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/CPU/MemoryAccessToWB.scala:4:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_bits_GRGDataSel_option =
    MemoryAccessToWB_valid ? MemoryAccessToWB_reg_GRGDataSel_option : 2'h0;	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :9:41, :27:41, :28:23]
  assign io_out_bits_alu_out_data =
    MemoryAccessToWB_valid ? MemoryAccessToWB_reg_alu_out_data : 32'h0;	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :9:41, :19:44, :27:41, :28:23]
  assign io_out_bits_MemoryAccess_out_data =
    MemoryAccessToWB_valid ? MemoryAccessToWB_reg_MemoryAccess_out_data : 32'h0;	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :9:41, :19:44, :27:41, :28:23]
  assign io_out_bits_rd_addr =
    MemoryAccessToWB_valid ? MemoryAccessToWB_reg_rd_addr : 5'h0;	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :9:41, :23:39, :27:41, :28:23]
  assign io_out_bits_rd_en = MemoryAccessToWB_valid & MemoryAccessToWB_reg_rd_en;	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :9:41, :27:41, :28:23]
  assign io_out_bits_now_pc =
    MemoryAccessToWB_valid ? MemoryAccessToWB_reg_now_pc : 32'h0;	// @[src/main/CPU/MemoryAccessToWB.scala:4:7, :9:41, :19:44, :27:41, :28:23]
endmodule

module GRGDataSel(	// @[src/main/CPU/GRGDataSel.scala:4:7]
  input  [31:0] io_alu_out_data,	// @[src/main/CPU/GRGDataSel.scala:5:16]
                io_MemoryAccess_out_data,	// @[src/main/CPU/GRGDataSel.scala:5:16]
  input  [1:0]  io_GRGDataSel_option,	// @[src/main/CPU/GRGDataSel.scala:5:16]
  output [31:0] io_GRGDataSel_out_data,	// @[src/main/CPU/GRGDataSel.scala:5:16]
  input  [31:0] io_now_pc	// @[src/main/CPU/GRGDataSel.scala:5:16]
);

  reg [31:0] casez_tmp;	// @[src/main/CPU/GRGDataSel.scala:7:86]
  always_comb begin	// @[src/main/CPU/GRGDataSel.scala:7:86]
    casez (io_GRGDataSel_option)	// @[src/main/CPU/GRGDataSel.scala:7:86]
      2'b00:
        casez_tmp = io_alu_out_data;	// @[src/main/CPU/GRGDataSel.scala:7:86]
      2'b01:
        casez_tmp = 32'h0;	// @[src/main/CPU/GRGDataSel.scala:7:86]
      2'b10:
        casez_tmp = io_MemoryAccess_out_data;	// @[src/main/CPU/GRGDataSel.scala:7:86]
      default:
        casez_tmp = io_now_pc + 32'h4;	// @[src/main/CPU/GRGDataSel.scala:7:86, :11:49]
    endcase	// @[src/main/CPU/GRGDataSel.scala:7:86]
  end // always_comb
  assign io_GRGDataSel_out_data = casez_tmp;	// @[src/main/CPU/GRGDataSel.scala:4:7, :7:86]
endmodule

module HaiTangCPU(	// @[src/main/CPU/HaiTangCPU.scala:6:7]
  input         clock,	// @[src/main/CPU/HaiTangCPU.scala:6:7]
                reset,	// @[src/main/CPU/HaiTangCPU.scala:6:7]
  output [31:0] io_pc_addr,	// @[src/main/CPU/HaiTangCPU.scala:7:16]
  input  [31:0] io_Instruction,	// @[src/main/CPU/HaiTangCPU.scala:7:16]
  output [31:0] io_r_addr,	// @[src/main/CPU/HaiTangCPU.scala:7:16]
  input  [31:0] io_r_data,	// @[src/main/CPU/HaiTangCPU.scala:7:16]
  output        io_r_en,	// @[src/main/CPU/HaiTangCPU.scala:7:16]
  output [31:0] io_w_addr,	// @[src/main/CPU/HaiTangCPU.scala:7:16]
                io_w_data,	// @[src/main/CPU/HaiTangCPU.scala:7:16]
  output        io_w_en,	// @[src/main/CPU/HaiTangCPU.scala:7:16]
  input         io_if_pc_valid,	// @[src/main/CPU/HaiTangCPU.scala:7:16]
  output [3:0]  io_r_ram_be_n	// @[src/main/CPU/HaiTangCPU.scala:7:16]
);

  wire [31:0] _GRGDataSel_obj_io_GRGDataSel_out_data;	// @[src/main/CPU/HaiTangCPU.scala:27:32]
  wire [1:0]  _MemoryAccessToWB_obj_io_out_bits_GRGDataSel_option;	// @[src/main/CPU/HaiTangCPU.scala:26:38]
  wire [31:0] _MemoryAccessToWB_obj_io_out_bits_alu_out_data;	// @[src/main/CPU/HaiTangCPU.scala:26:38]
  wire [31:0] _MemoryAccessToWB_obj_io_out_bits_MemoryAccess_out_data;	// @[src/main/CPU/HaiTangCPU.scala:26:38]
  wire [4:0]  _MemoryAccessToWB_obj_io_out_bits_rd_addr;	// @[src/main/CPU/HaiTangCPU.scala:26:38]
  wire        _MemoryAccessToWB_obj_io_out_bits_rd_en;	// @[src/main/CPU/HaiTangCPU.scala:26:38]
  wire [31:0] _MemoryAccessToWB_obj_io_out_bits_now_pc;	// @[src/main/CPU/HaiTangCPU.scala:26:38]
  wire [31:0] _MemoryAccess_obj_io_MemoryAccess_out;	// @[src/main/CPU/HaiTangCPU.scala:24:34]
  wire        _ExecToMemoryAccess_obj_io_out_valid;	// @[src/main/CPU/HaiTangCPU.scala:23:40]
  wire [2:0]  _ExecToMemoryAccess_obj_io_out_bits_MemoryAccess_option;	// @[src/main/CPU/HaiTangCPU.scala:23:40]
  wire [31:0] _ExecToMemoryAccess_obj_io_out_bits_alu_out_data;	// @[src/main/CPU/HaiTangCPU.scala:23:40]
  wire [1:0]  _ExecToMemoryAccess_obj_io_out_bits_GRGDataSel_option;	// @[src/main/CPU/HaiTangCPU.scala:23:40]
  wire [4:0]  _ExecToMemoryAccess_obj_io_out_bits_rd_addr;	// @[src/main/CPU/HaiTangCPU.scala:23:40]
  wire        _ExecToMemoryAccess_obj_io_out_bits_rd_en;	// @[src/main/CPU/HaiTangCPU.scala:23:40]
  wire [31:0] _ExecToMemoryAccess_obj_io_out_bits_now_pc;	// @[src/main/CPU/HaiTangCPU.scala:23:40]
  wire [31:0] _ALU_obj_io_out_data;	// @[src/main/CPU/HaiTangCPU.scala:21:25]
  wire [31:0] _ALUDataSel_obj_io_alu_a_data;	// @[src/main/CPU/HaiTangCPU.scala:20:32]
  wire [31:0] _ALUDataSel_obj_io_alu_b_data;	// @[src/main/CPU/HaiTangCPU.scala:20:32]
  wire        _DecodeToExec_obj_io_in_ready;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire        _DecodeToExec_obj_io_out_valid;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [3:0]  _DecodeToExec_obj_io_out_bits_alu_option;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [2:0]  _DecodeToExec_obj_io_out_bits_MemoryAccess_option;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [1:0]  _DecodeToExec_obj_io_out_bits_GRGDataSel_option;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [1:0]  _DecodeToExec_obj_io_out_bits_alu_a_sel;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [1:0]  _DecodeToExec_obj_io_out_bits_alu_b_sel;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire        _DecodeToExec_obj_io_out_bits_ram_r;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire        _DecodeToExec_obj_io_out_bits_ram_w;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [31:0] _DecodeToExec_obj_io_out_bits_Out_Eximm;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [31:0] _DecodeToExec_obj_io_out_bits_rj_data;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [31:0] _DecodeToExec_obj_io_out_bits_rk_data;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [31:0] _DecodeToExec_obj_io_out_bits_rd_data_out;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [31:0] _DecodeToExec_obj_io_out_bits_now_pc;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire        _DecodeToExec_obj_io_out_bits_if_Jump;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [4:0]  _DecodeToExec_obj_io_out_bits_rd_addr;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire        _DecodeToExec_obj_io_out_bits_rd_en;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [31:0] _DecodeToExec_obj_io_out_bits_var_pc_addr;	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  wire [31:0] _Read_GRG_obj_io_out_rj;	// @[src/main/CPU/HaiTangCPU.scala:16:30]
  wire [31:0] _Read_GRG_obj_io_out_rk;	// @[src/main/CPU/HaiTangCPU.scala:16:30]
  wire [31:0] _Read_GRG_obj_io_out_rd;	// @[src/main/CPU/HaiTangCPU.scala:16:30]
  wire [31:0] _GenericRegisterGroup_obj_io_rj_data;	// @[src/main/CPU/HaiTangCPU.scala:15:42]
  wire [31:0] _GenericRegisterGroup_obj_io_rk_data;	// @[src/main/CPU/HaiTangCPU.scala:15:42]
  wire [31:0] _GenericRegisterGroup_obj_io_rd_data_out;	// @[src/main/CPU/HaiTangCPU.scala:15:42]
  wire        _conditional_branch_obj_io_if_Jump;	// @[src/main/CPU/HaiTangCPU.scala:14:40]
  wire [31:0] _conditional_branch_obj_io_out_var_pc_addr;	// @[src/main/CPU/HaiTangCPU.scala:14:40]
  wire [3:0]  _Decode_obj_io_imm_option;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire [3:0]  _Decode_obj_io_conditional_branch_option;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire [3:0]  _Decode_obj_io_alu_option;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire [2:0]  _Decode_obj_io_MemoryAccess_option;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire [1:0]  _Decode_obj_io_GRGDataSel_option;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire [1:0]  _Decode_obj_io_alu_a_sel;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire [1:0]  _Decode_obj_io_alu_b_sel;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire        _Decode_obj_io_ram_r;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire        _Decode_obj_io_ram_w;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire        _Decode_obj_io_rd_en;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire [4:0]  _Decode_obj_io_rd_addr;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire [4:0]  _Decode_obj_io_rj_addr;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire [4:0]  _Decode_obj_io_rk_addr;	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  wire [31:0] _imm_obj_io_Out_Eximm;	// @[src/main/CPU/HaiTangCPU.scala:12:25]
  wire        _FetchToDecode_obj_io_in_ready;	// @[src/main/CPU/HaiTangCPU.scala:10:35]
  wire        _FetchToDecode_obj_io_out_valid;	// @[src/main/CPU/HaiTangCPU.scala:10:35]
  wire [31:0] _FetchToDecode_obj_io_out_bits_Instruction;	// @[src/main/CPU/HaiTangCPU.scala:10:35]
  wire [31:0] _FetchToDecode_obj_io_out_bits_now_pc;	// @[src/main/CPU/HaiTangCPU.scala:10:35]
  wire [31:0] _PC_obj_io_now_pc;	// @[src/main/CPU/HaiTangCPU.scala:9:24]
  PC PC_obj (	// @[src/main/CPU/HaiTangCPU.scala:9:24]
    .clock           (clock),
    .reset           (reset),
    .io_if_Jump
      (_DecodeToExec_obj_io_out_bits_if_Jump & _DecodeToExec_obj_io_out_valid),	// @[src/main/CPU/HaiTangCPU.scala:18:34, :34:62]
    .io_now_pc       (_PC_obj_io_now_pc),
    .io_if_valid     (_FetchToDecode_obj_io_in_ready & io_if_pc_valid),	// @[src/main/CPU/HaiTangCPU.scala:10:35, :31:57]
    .io_alu_out_data (_DecodeToExec_obj_io_out_bits_var_pc_addr)	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  );	// @[src/main/CPU/HaiTangCPU.scala:9:24]
  FetchToDecode FetchToDecode_obj (	// @[src/main/CPU/HaiTangCPU.scala:10:35]
    .clock                   (clock),
    .reset                   (reset),
    .io_in_ready             (_FetchToDecode_obj_io_in_ready),
    .io_in_valid             (io_if_pc_valid),
    .io_in_bits_Instruction  (io_Instruction),
    .io_in_bits_now_pc       (_PC_obj_io_now_pc),	// @[src/main/CPU/HaiTangCPU.scala:9:24]
    .io_out_ready            (_DecodeToExec_obj_io_in_ready),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_out_valid            (_FetchToDecode_obj_io_out_valid),
    .io_out_bits_Instruction (_FetchToDecode_obj_io_out_bits_Instruction),
    .io_out_bits_now_pc      (_FetchToDecode_obj_io_out_bits_now_pc),
    .io_if_var_pc_Conflict   (~_DecodeToExec_obj_io_out_bits_if_Jump)	// @[src/main/CPU/HaiTangCPU.scala:18:34, :180:48]
  );	// @[src/main/CPU/HaiTangCPU.scala:10:35]
  imm imm_obj (	// @[src/main/CPU/HaiTangCPU.scala:12:25]
    .io_Instruction (_FetchToDecode_obj_io_out_bits_Instruction),	// @[src/main/CPU/HaiTangCPU.scala:10:35]
    .io_Out_Eximm   (_imm_obj_io_Out_Eximm),
    .io_imm_option  (_Decode_obj_io_imm_option)	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  );	// @[src/main/CPU/HaiTangCPU.scala:12:25]
  Decode Decode_obj (	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_Instruction               (_FetchToDecode_obj_io_out_bits_Instruction),	// @[src/main/CPU/HaiTangCPU.scala:10:35]
    .io_imm_option                (_Decode_obj_io_imm_option),
    .io_conditional_branch_option (_Decode_obj_io_conditional_branch_option),
    .io_alu_option                (_Decode_obj_io_alu_option),
    .io_MemoryAccess_option       (_Decode_obj_io_MemoryAccess_option),
    .io_GRGDataSel_option         (_Decode_obj_io_GRGDataSel_option),
    .io_alu_a_sel                 (_Decode_obj_io_alu_a_sel),
    .io_alu_b_sel                 (_Decode_obj_io_alu_b_sel),
    .io_ram_r                     (_Decode_obj_io_ram_r),
    .io_ram_w                     (_Decode_obj_io_ram_w),
    .io_rd_en                     (_Decode_obj_io_rd_en),
    .io_rd_addr                   (_Decode_obj_io_rd_addr),
    .io_rj_addr                   (_Decode_obj_io_rj_addr),
    .io_rk_addr                   (_Decode_obj_io_rk_addr)
  );	// @[src/main/CPU/HaiTangCPU.scala:13:28]
  conditional_branch conditional_branch_obj (	// @[src/main/CPU/HaiTangCPU.scala:14:40]
    .io_conditional_branch_option (_Decode_obj_io_conditional_branch_option),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_if_Jump                   (_conditional_branch_obj_io_if_Jump),
    .io_rj_data                   (_Read_GRG_obj_io_out_rj),	// @[src/main/CPU/HaiTangCPU.scala:16:30]
    .io_rd_data                   (_Read_GRG_obj_io_out_rd),	// @[src/main/CPU/HaiTangCPU.scala:16:30]
    .io_now_pc                    (_FetchToDecode_obj_io_out_bits_now_pc),	// @[src/main/CPU/HaiTangCPU.scala:10:35]
    .io_imm                       (_imm_obj_io_Out_Eximm),	// @[src/main/CPU/HaiTangCPU.scala:12:25]
    .io_out_var_pc_addr           (_conditional_branch_obj_io_out_var_pc_addr)
  );	// @[src/main/CPU/HaiTangCPU.scala:14:40]
  GenericRegisterGroup GenericRegisterGroup_obj (	// @[src/main/CPU/HaiTangCPU.scala:15:42]
    .clock          (clock),
    .reset          (reset),
    .io_rd_en       (_MemoryAccessToWB_obj_io_out_bits_rd_en),	// @[src/main/CPU/HaiTangCPU.scala:26:38]
    .io_rd_addr_in  (_MemoryAccessToWB_obj_io_out_bits_rd_addr),	// @[src/main/CPU/HaiTangCPU.scala:26:38]
    .io_rd_addr_out (_Decode_obj_io_rd_addr),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_rj_addr     (_Decode_obj_io_rj_addr),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_rk_addr     (_Decode_obj_io_rk_addr),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_rd_data_in  (_GRGDataSel_obj_io_GRGDataSel_out_data),	// @[src/main/CPU/HaiTangCPU.scala:27:32]
    .io_rj_data     (_GenericRegisterGroup_obj_io_rj_data),
    .io_rk_data     (_GenericRegisterGroup_obj_io_rk_data),
    .io_rd_data_out (_GenericRegisterGroup_obj_io_rd_data_out)
  );	// @[src/main/CPU/HaiTangCPU.scala:15:42]
  Read_GRG Read_GRG_obj (	// @[src/main/CPU/HaiTangCPU.scala:16:30]
    .io_out_rj                         (_Read_GRG_obj_io_out_rj),
    .io_out_rk                         (_Read_GRG_obj_io_out_rk),
    .io_out_rd                         (_Read_GRG_obj_io_out_rd),
    .io_GRG_rj_in                      (_GenericRegisterGroup_obj_io_rj_data),	// @[src/main/CPU/HaiTangCPU.scala:15:42]
    .io_GRG_rk_in                      (_GenericRegisterGroup_obj_io_rk_data),	// @[src/main/CPU/HaiTangCPU.scala:15:42]
    .io_GRG_rd_in                      (_GenericRegisterGroup_obj_io_rd_data_out),	// @[src/main/CPU/HaiTangCPU.scala:15:42]
    .io_rj_addr                        (_Decode_obj_io_rj_addr),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_rk_addr                        (_Decode_obj_io_rk_addr),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_rd_addr                        (_Decode_obj_io_rd_addr),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_Exec_wb_rd_addr                (_DecodeToExec_obj_io_out_bits_rd_addr),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_Exec_wb_rd_en                  (_DecodeToExec_obj_io_out_bits_rd_en),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_Exec_ALU_data                  (_ALU_obj_io_out_data),	// @[src/main/CPU/HaiTangCPU.scala:21:25]
    .io_Exec_GRGDataSel_option         (_DecodeToExec_obj_io_out_bits_GRGDataSel_option),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_Exec_now_pc                    (_DecodeToExec_obj_io_out_bits_now_pc),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_MemoryAccess_ALU_data          (_ExecToMemoryAccess_obj_io_out_bits_alu_out_data),	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .io_MemoryAccess_wb_rd_addr        (_ExecToMemoryAccess_obj_io_out_bits_rd_addr),	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .io_MemoryAccess_wb_rd_en          (_ExecToMemoryAccess_obj_io_out_bits_rd_en),	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .io_MemoryAccess_MEM_data          (io_r_data),
    .io_MemoryAccess_GRGDataSel_option
      (_ExecToMemoryAccess_obj_io_out_bits_MemoryAccess_option[1:0]),	// @[src/main/CPU/HaiTangCPU.scala:23:40, :69:52]
    .io_MemoryAccess_now_pc            (_ExecToMemoryAccess_obj_io_out_bits_now_pc),	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .io_WB_ALU_data                    (_MemoryAccessToWB_obj_io_out_bits_alu_out_data),	// @[src/main/CPU/HaiTangCPU.scala:26:38]
    .io_WB_wb_rd_addr                  (_MemoryAccessToWB_obj_io_out_bits_rd_addr),	// @[src/main/CPU/HaiTangCPU.scala:26:38]
    .io_WB_wb_rd_en                    (_MemoryAccessToWB_obj_io_out_bits_rd_en),	// @[src/main/CPU/HaiTangCPU.scala:26:38]
    .io_WB_MEM_data
      (_MemoryAccessToWB_obj_io_out_bits_MemoryAccess_out_data),	// @[src/main/CPU/HaiTangCPU.scala:26:38]
    .io_WB_mem_GRGDataSel_option
      (_MemoryAccessToWB_obj_io_out_bits_GRGDataSel_option),	// @[src/main/CPU/HaiTangCPU.scala:26:38]
    .io_WB_now_pc                      (_MemoryAccessToWB_obj_io_out_bits_now_pc)	// @[src/main/CPU/HaiTangCPU.scala:26:38]
  );	// @[src/main/CPU/HaiTangCPU.scala:16:30]
  DecodeToExec DecodeToExec_obj (	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .clock                           (clock),
    .reset                           (reset),
    .io_in_ready                     (_DecodeToExec_obj_io_in_ready),
    .io_in_valid                     (_FetchToDecode_obj_io_out_valid),	// @[src/main/CPU/HaiTangCPU.scala:10:35]
    .io_in_bits_alu_option           (_Decode_obj_io_alu_option),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_in_bits_MemoryAccess_option  (_Decode_obj_io_MemoryAccess_option),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_in_bits_GRGDataSel_option    (_Decode_obj_io_GRGDataSel_option),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_in_bits_alu_a_sel            (_Decode_obj_io_alu_a_sel),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_in_bits_alu_b_sel            (_Decode_obj_io_alu_b_sel),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_in_bits_ram_r                (_Decode_obj_io_ram_r),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_in_bits_ram_w                (_Decode_obj_io_ram_w),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_in_bits_Out_Eximm            (_imm_obj_io_Out_Eximm),	// @[src/main/CPU/HaiTangCPU.scala:12:25]
    .io_in_bits_rj_data              (_Read_GRG_obj_io_out_rj),	// @[src/main/CPU/HaiTangCPU.scala:16:30]
    .io_in_bits_rk_data              (_Read_GRG_obj_io_out_rk),	// @[src/main/CPU/HaiTangCPU.scala:16:30]
    .io_in_bits_rd_data_out          (_Read_GRG_obj_io_out_rd),	// @[src/main/CPU/HaiTangCPU.scala:16:30]
    .io_in_bits_now_pc               (_FetchToDecode_obj_io_out_bits_now_pc),	// @[src/main/CPU/HaiTangCPU.scala:10:35]
    .io_in_bits_if_Jump              (_conditional_branch_obj_io_if_Jump),	// @[src/main/CPU/HaiTangCPU.scala:14:40]
    .io_in_bits_rd_addr              (_Decode_obj_io_rd_addr),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_in_bits_rd_en                (_Decode_obj_io_rd_en),	// @[src/main/CPU/HaiTangCPU.scala:13:28]
    .io_in_bits_var_pc_addr          (_conditional_branch_obj_io_out_var_pc_addr),	// @[src/main/CPU/HaiTangCPU.scala:14:40]
    .io_out_valid                    (_DecodeToExec_obj_io_out_valid),
    .io_out_bits_alu_option          (_DecodeToExec_obj_io_out_bits_alu_option),
    .io_out_bits_MemoryAccess_option (_DecodeToExec_obj_io_out_bits_MemoryAccess_option),
    .io_out_bits_GRGDataSel_option   (_DecodeToExec_obj_io_out_bits_GRGDataSel_option),
    .io_out_bits_alu_a_sel           (_DecodeToExec_obj_io_out_bits_alu_a_sel),
    .io_out_bits_alu_b_sel           (_DecodeToExec_obj_io_out_bits_alu_b_sel),
    .io_out_bits_ram_r               (_DecodeToExec_obj_io_out_bits_ram_r),
    .io_out_bits_ram_w               (_DecodeToExec_obj_io_out_bits_ram_w),
    .io_out_bits_Out_Eximm           (_DecodeToExec_obj_io_out_bits_Out_Eximm),
    .io_out_bits_rj_data             (_DecodeToExec_obj_io_out_bits_rj_data),
    .io_out_bits_rk_data             (_DecodeToExec_obj_io_out_bits_rk_data),
    .io_out_bits_rd_data_out         (_DecodeToExec_obj_io_out_bits_rd_data_out),
    .io_out_bits_now_pc              (_DecodeToExec_obj_io_out_bits_now_pc),
    .io_out_bits_if_Jump             (_DecodeToExec_obj_io_out_bits_if_Jump),
    .io_out_bits_rd_addr             (_DecodeToExec_obj_io_out_bits_rd_addr),
    .io_out_bits_rd_en               (_DecodeToExec_obj_io_out_bits_rd_en),
    .io_out_bits_var_pc_addr         (_DecodeToExec_obj_io_out_bits_var_pc_addr),
    .io_if_var_pc_Conflict           (~_DecodeToExec_obj_io_out_bits_if_Jump)	// @[src/main/CPU/HaiTangCPU.scala:18:34, :180:48]
  );	// @[src/main/CPU/HaiTangCPU.scala:18:34]
  ALUDataSel ALUDataSel_obj (	// @[src/main/CPU/HaiTangCPU.scala:20:32]
    .io_alu_a_sel  (_DecodeToExec_obj_io_out_bits_alu_a_sel),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_alu_b_sel  (_DecodeToExec_obj_io_out_bits_alu_b_sel),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_imm_data   (_DecodeToExec_obj_io_out_bits_Out_Eximm),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_rj_data    (_DecodeToExec_obj_io_out_bits_rj_data),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_rk_data    (_DecodeToExec_obj_io_out_bits_rk_data),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_now_pc     (_DecodeToExec_obj_io_out_bits_now_pc),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_alu_a_data (_ALUDataSel_obj_io_alu_a_data),
    .io_alu_b_data (_ALUDataSel_obj_io_alu_b_data)
  );	// @[src/main/CPU/HaiTangCPU.scala:20:32]
  ALU ALU_obj (	// @[src/main/CPU/HaiTangCPU.scala:21:25]
    .io_in_data1   (_ALUDataSel_obj_io_alu_a_data),	// @[src/main/CPU/HaiTangCPU.scala:20:32]
    .io_in_data2   (_ALUDataSel_obj_io_alu_b_data),	// @[src/main/CPU/HaiTangCPU.scala:20:32]
    .io_alu_option (_DecodeToExec_obj_io_out_bits_alu_option),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_out_data   (_ALU_obj_io_out_data)
  );	// @[src/main/CPU/HaiTangCPU.scala:21:25]
  ExecToMemoryAccess ExecToMemoryAccess_obj (	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .clock                           (clock),
    .reset                           (reset),
    .io_in_valid                     (_DecodeToExec_obj_io_out_valid),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_in_bits_MemoryAccess_option  (_DecodeToExec_obj_io_out_bits_MemoryAccess_option),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_in_bits_alu_out_data         (_ALU_obj_io_out_data),	// @[src/main/CPU/HaiTangCPU.scala:21:25]
    .io_in_bits_ram_r                (_DecodeToExec_obj_io_out_bits_ram_r),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_in_bits_ram_w                (_DecodeToExec_obj_io_out_bits_ram_w),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_in_bits_GRGDataSel_option    (_DecodeToExec_obj_io_out_bits_GRGDataSel_option),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_in_bits_rd_data_out          (_DecodeToExec_obj_io_out_bits_rd_data_out),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_in_bits_rd_addr              (_DecodeToExec_obj_io_out_bits_rd_addr),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_in_bits_rd_en                (_DecodeToExec_obj_io_out_bits_rd_en),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_in_bits_now_pc               (_DecodeToExec_obj_io_out_bits_now_pc),	// @[src/main/CPU/HaiTangCPU.scala:18:34]
    .io_out_valid                    (_ExecToMemoryAccess_obj_io_out_valid),
    .io_out_bits_MemoryAccess_option
      (_ExecToMemoryAccess_obj_io_out_bits_MemoryAccess_option),
    .io_out_bits_alu_out_data        (_ExecToMemoryAccess_obj_io_out_bits_alu_out_data),
    .io_out_bits_ram_r               (io_r_en),
    .io_out_bits_ram_w               (io_w_en),
    .io_out_bits_GRGDataSel_option
      (_ExecToMemoryAccess_obj_io_out_bits_GRGDataSel_option),
    .io_out_bits_rd_data_out         (io_w_data),
    .io_out_bits_rd_addr             (_ExecToMemoryAccess_obj_io_out_bits_rd_addr),
    .io_out_bits_rd_en               (_ExecToMemoryAccess_obj_io_out_bits_rd_en),
    .io_out_bits_now_pc              (_ExecToMemoryAccess_obj_io_out_bits_now_pc)
  );	// @[src/main/CPU/HaiTangCPU.scala:23:40]
  MemoryAccess MemoryAccess_obj (	// @[src/main/CPU/HaiTangCPU.scala:24:34]
    .io_ram_be_n            (io_r_ram_be_n),
    .io_MemoryAccess_option (_ExecToMemoryAccess_obj_io_out_bits_MemoryAccess_option),	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .io_MemoryAccess_in     (_ExecToMemoryAccess_obj_io_out_bits_alu_out_data),	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .io_MemoryAccess_out    (_MemoryAccess_obj_io_MemoryAccess_out)
  );	// @[src/main/CPU/HaiTangCPU.scala:24:34]
  MemoryAccessToWB MemoryAccessToWB_obj (	// @[src/main/CPU/HaiTangCPU.scala:26:38]
    .clock                             (clock),
    .reset                             (reset),
    .io_in_valid                       (_ExecToMemoryAccess_obj_io_out_valid),	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .io_in_bits_GRGDataSel_option
      (_ExecToMemoryAccess_obj_io_out_bits_GRGDataSel_option),	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .io_in_bits_alu_out_data           (_ExecToMemoryAccess_obj_io_out_bits_alu_out_data),	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .io_in_bits_MemoryAccess_out_data  (io_r_data),
    .io_in_bits_rd_addr                (_ExecToMemoryAccess_obj_io_out_bits_rd_addr),	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .io_in_bits_rd_en                  (_ExecToMemoryAccess_obj_io_out_bits_rd_en),	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .io_in_bits_now_pc                 (_ExecToMemoryAccess_obj_io_out_bits_now_pc),	// @[src/main/CPU/HaiTangCPU.scala:23:40]
    .io_out_bits_GRGDataSel_option
      (_MemoryAccessToWB_obj_io_out_bits_GRGDataSel_option),
    .io_out_bits_alu_out_data          (_MemoryAccessToWB_obj_io_out_bits_alu_out_data),
    .io_out_bits_MemoryAccess_out_data
      (_MemoryAccessToWB_obj_io_out_bits_MemoryAccess_out_data),
    .io_out_bits_rd_addr               (_MemoryAccessToWB_obj_io_out_bits_rd_addr),
    .io_out_bits_rd_en                 (_MemoryAccessToWB_obj_io_out_bits_rd_en),
    .io_out_bits_now_pc                (_MemoryAccessToWB_obj_io_out_bits_now_pc)
  );	// @[src/main/CPU/HaiTangCPU.scala:26:38]
  GRGDataSel GRGDataSel_obj (	// @[src/main/CPU/HaiTangCPU.scala:27:32]
    .io_alu_out_data          (_MemoryAccessToWB_obj_io_out_bits_alu_out_data),	// @[src/main/CPU/HaiTangCPU.scala:26:38]
    .io_MemoryAccess_out_data (_MemoryAccessToWB_obj_io_out_bits_MemoryAccess_out_data),	// @[src/main/CPU/HaiTangCPU.scala:26:38]
    .io_GRGDataSel_option     (_MemoryAccessToWB_obj_io_out_bits_GRGDataSel_option),	// @[src/main/CPU/HaiTangCPU.scala:26:38]
    .io_GRGDataSel_out_data   (_GRGDataSel_obj_io_GRGDataSel_out_data),
    .io_now_pc                (_MemoryAccessToWB_obj_io_out_bits_now_pc)	// @[src/main/CPU/HaiTangCPU.scala:26:38]
  );	// @[src/main/CPU/HaiTangCPU.scala:27:32]
  assign io_pc_addr = _PC_obj_io_now_pc;	// @[src/main/CPU/HaiTangCPU.scala:6:7, :9:24]
  assign io_r_addr = _MemoryAccess_obj_io_MemoryAccess_out;	// @[src/main/CPU/HaiTangCPU.scala:6:7, :24:34]
  assign io_w_addr = _MemoryAccess_obj_io_MemoryAccess_out;	// @[src/main/CPU/HaiTangCPU.scala:6:7, :24:34]
endmodule

// external module async_receiver

// external module async_transmitter

module Serial(	// @[src/main/Memctl/Serial.scala:4:7]
  input         clock,	// @[src/main/Memctl/Serial.scala:4:7]
                reset,	// @[src/main/Memctl/Serial.scala:4:7]
                io_RxD,	// @[src/main/Memctl/Serial.scala:5:16]
  output        io_TxD,	// @[src/main/Memctl/Serial.scala:5:16]
  input         io_if_get_status,	// @[src/main/Memctl/Serial.scala:5:16]
  output [31:0] io_Serial_read_Data,	// @[src/main/Memctl/Serial.scala:5:16]
  input  [31:0] io_w_serial_data,	// @[src/main/Memctl/Serial.scala:5:16]
  input         io_r_serial,	// @[src/main/Memctl/Serial.scala:5:16]
                io_w_serial	// @[src/main/Memctl/Serial.scala:5:16]
);

  wire        _async_transmitter_obj_TxD_busy;	// @[src/main/Memctl/Serial.scala:26:39]
  wire [7:0]  _async_receiver_obj_RxD_data;	// @[src/main/Memctl/Serial.scala:25:36]
  wire        _async_receiver_obj_RxD_data_ready;	// @[src/main/Memctl/Serial.scala:25:36]
  reg  [31:0] Serial_read_Data_reg;	// @[src/main/Memctl/Serial.scala:31:39]
  reg  [1:0]  RXD_status;	// @[src/main/Memctl/Serial.scala:33:29]
  reg  [1:0]  casez_tmp;	// @[src/main/Memctl/Serial.scala:34:47]
  always_comb begin	// @[src/main/Memctl/Serial.scala:34:47]
    casez (RXD_status)	// @[src/main/Memctl/Serial.scala:33:29, :34:47]
      2'b00:
        casez_tmp = {1'h0, io_r_serial & ~io_if_get_status};	// @[src/main/Memctl/Serial.scala:4:7, :34:47, :36:{26,39,41}]
      2'b01:
        casez_tmp = {_async_receiver_obj_RxD_data_ready, 1'h0};	// @[src/main/Memctl/Serial.scala:4:7, :25:36, :34:47, :37:41]
      2'b10:
        casez_tmp = 2'h3;	// @[src/main/Memctl/Serial.scala:34:47]
      default:
        casez_tmp = 2'h0;	// @[src/main/Memctl/Serial.scala:4:7, :34:47]
    endcase	// @[src/main/Memctl/Serial.scala:33:29, :34:47]
  end // always_comb
  reg  [1:0]  TXD_status;	// @[src/main/Memctl/Serial.scala:48:29]
  reg  [1:0]  casez_tmp_0;	// @[src/main/Memctl/Serial.scala:49:51]
  always_comb begin	// @[src/main/Memctl/Serial.scala:49:51]
    casez (TXD_status)	// @[src/main/Memctl/Serial.scala:48:29, :49:51]
      2'b00:
        casez_tmp_0 = {1'h0, io_w_serial};	// @[src/main/Memctl/Serial.scala:4:7, :49:51, :51:30]
      2'b01:
        casez_tmp_0 = _async_transmitter_obj_TxD_busy ? 2'h1 : 2'h2;	// @[src/main/Memctl/Serial.scala:4:7, :26:39, :49:51, :52:38]
      2'b10:
        casez_tmp_0 = 2'h3;	// @[src/main/Memctl/Serial.scala:49:51]
      default:
        casez_tmp_0 = 2'h0;	// @[src/main/Memctl/Serial.scala:4:7, :49:51]
    endcase	// @[src/main/Memctl/Serial.scala:48:29, :49:51]
  end // always_comb
  reg  [7:0]  TxD_data_reg;	// @[src/main/Memctl/Serial.scala:57:27]
  always @(posedge clock) begin	// @[src/main/Memctl/Serial.scala:4:7]
    if (reset) begin	// @[src/main/Memctl/Serial.scala:4:7]
      Serial_read_Data_reg <= 32'h0;	// @[src/main/Memctl/Serial.scala:31:39]
      RXD_status <= 2'h0;	// @[src/main/Memctl/Serial.scala:4:7, :33:29]
      TXD_status <= 2'h0;	// @[src/main/Memctl/Serial.scala:4:7, :48:29]
    end
    else begin	// @[src/main/Memctl/Serial.scala:4:7]
      if (RXD_status == 2'h2)	// @[src/main/Memctl/Serial.scala:4:7, :33:29, :34:47]
        Serial_read_Data_reg <=
          {{24{_async_receiver_obj_RxD_data[7]}}, _async_receiver_obj_RxD_data};	// @[src/main/Memctl/Serial.scala:25:36, :31:39, :43:32]
      RXD_status <= casez_tmp;	// @[src/main/Memctl/Serial.scala:33:29, :34:47]
      TXD_status <= casez_tmp_0;	// @[src/main/Memctl/Serial.scala:48:29, :49:51]
    end
    if (io_w_serial)	// @[src/main/Memctl/Serial.scala:5:16]
      TxD_data_reg <= io_w_serial_data[7:0];	// @[src/main/Memctl/Serial.scala:57:27, :63:53]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/Memctl/Serial.scala:4:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/Memctl/Serial.scala:4:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/Memctl/Serial.scala:4:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:1];	// @[src/main/Memctl/Serial.scala:4:7]
    initial begin	// @[src/main/Memctl/Serial.scala:4:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/Memctl/Serial.scala:4:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/Memctl/Serial.scala:4:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/Memctl/Serial.scala:4:7]
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// @[src/main/Memctl/Serial.scala:4:7]
        end	// @[src/main/Memctl/Serial.scala:4:7]
        Serial_read_Data_reg = _RANDOM[1'h0];	// @[src/main/Memctl/Serial.scala:4:7, :31:39]
        RXD_status = _RANDOM[1'h1][1:0];	// @[src/main/Memctl/Serial.scala:4:7, :33:29]
        TXD_status = _RANDOM[1'h1][3:2];	// @[src/main/Memctl/Serial.scala:4:7, :33:29, :48:29]
        TxD_data_reg = _RANDOM[1'h1][11:4];	// @[src/main/Memctl/Serial.scala:4:7, :33:29, :57:27]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/Memctl/Serial.scala:4:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/Memctl/Serial.scala:4:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  async_receiver async_receiver_obj (	// @[src/main/Memctl/Serial.scala:25:36]
    .clk            (clock),
    .RxD            (io_RxD),
    .RxD_data       (_async_receiver_obj_RxD_data),
    .RxD_data_ready (_async_receiver_obj_RxD_data_ready),
    .RxD_clear      ((&RXD_status) | reset)	// @[src/main/Memctl/Serial.scala:33:29, :34:47, :42:65]
  );	// @[src/main/Memctl/Serial.scala:25:36]
  async_transmitter async_transmitter_obj (	// @[src/main/Memctl/Serial.scala:26:39]
    .clk       (clock),
    .TxD_start (TXD_status == 2'h2),	// @[src/main/Memctl/Serial.scala:4:7, :48:29, :49:51]
    .TxD_data  (TxD_data_reg),	// @[src/main/Memctl/Serial.scala:57:27]
    .TxD       (io_TxD),
    .TxD_busy  (_async_transmitter_obj_TxD_busy)
  );	// @[src/main/Memctl/Serial.scala:26:39]
  assign io_Serial_read_Data =
    io_if_get_status
      ? {30'h0, _async_receiver_obj_RxD_data_ready, ~_async_transmitter_obj_TxD_busy}
      : Serial_read_Data_reg;	// @[src/main/Memctl/Serial.scala:4:7, :25:36, :26:39, :31:39, :44:{31,52,100}]
endmodule

module Memctl(	// @[src/main/Memctl/Memctl.scala:5:7]
  input         clock,	// @[src/main/Memctl/Memctl.scala:5:7]
                reset,	// @[src/main/Memctl/Memctl.scala:5:7]
  input  [31:0] io_base_ram_data_in,	// @[src/main/Memctl/Memctl.scala:6:16]
  output [31:0] io_base_ram_data_out,	// @[src/main/Memctl/Memctl.scala:6:16]
  output [19:0] io_base_ram_addr,	// @[src/main/Memctl/Memctl.scala:6:16]
  output [3:0]  io_base_ram_be_n,	// @[src/main/Memctl/Memctl.scala:6:16]
  output        io_base_ram_oe_n,	// @[src/main/Memctl/Memctl.scala:6:16]
                io_base_ram_we_n,	// @[src/main/Memctl/Memctl.scala:6:16]
                io_if_base_ram_in,	// @[src/main/Memctl/Memctl.scala:6:16]
  input  [31:0] io_ext_ram_data_in,	// @[src/main/Memctl/Memctl.scala:6:16]
  output [31:0] io_ext_ram_data_out,	// @[src/main/Memctl/Memctl.scala:6:16]
  output [19:0] io_ext_ram_addr,	// @[src/main/Memctl/Memctl.scala:6:16]
  output [3:0]  io_ext_ram_be_n,	// @[src/main/Memctl/Memctl.scala:6:16]
  output        io_ext_ram_ce_n,	// @[src/main/Memctl/Memctl.scala:6:16]
                io_ext_ram_oe_n,	// @[src/main/Memctl/Memctl.scala:6:16]
                io_ext_ram_we_n,	// @[src/main/Memctl/Memctl.scala:6:16]
                io_if_ext_ram_in,	// @[src/main/Memctl/Memctl.scala:6:16]
  input  [31:0] io_pc_addr,	// @[src/main/Memctl/Memctl.scala:6:16]
  output        io_if_pc_valid,	// @[src/main/Memctl/Memctl.scala:6:16]
  output [31:0] io_Instruction,	// @[src/main/Memctl/Memctl.scala:6:16]
  input  [3:0]  io_r_ram_be_n,	// @[src/main/Memctl/Memctl.scala:6:16]
  input  [31:0] io_mem_read_addr,	// @[src/main/Memctl/Memctl.scala:6:16]
  output [31:0] io_mem_read_Data,	// @[src/main/Memctl/Memctl.scala:6:16]
  input  [31:0] io_mem_write_Data,	// @[src/main/Memctl/Memctl.scala:6:16]
                io_mem_write_addr,	// @[src/main/Memctl/Memctl.scala:6:16]
  input         io_mem_read_en,	// @[src/main/Memctl/Memctl.scala:6:16]
                io_mem_write_en,	// @[src/main/Memctl/Memctl.scala:6:16]
  output        io_txd,	// @[src/main/Memctl/Memctl.scala:6:16]
  input         io_rxd	// @[src/main/Memctl/Memctl.scala:6:16]
);

  wire [31:0] _Serial_obj_io_Serial_read_Data;	// @[src/main/Memctl/Memctl.scala:47:28]
  wire [31:0] MemoryAccess_addr = io_mem_read_en ? io_mem_read_addr : io_mem_write_addr;	// @[src/main/Memctl/Memctl.scala:52:32]
  wire        Serial_obj_io_if_get_status = MemoryAccess_addr == 32'hBFD003FC;	// @[src/main/Memctl/Memctl.scala:52:32, :53:291]
  wire [1:0]  mem_addr_judgment =
    MemoryAccess_addr[31] & MemoryAccess_addr < 32'h80400000
      ? 2'h0
      : MemoryAccess_addr > 32'h803FFFFF & MemoryAccess_addr < 32'h80800000
          ? 2'h1
          : {1'h1, ~(MemoryAccess_addr == 32'hBFD003F8 | Serial_obj_io_if_get_status)};	// @[src/main/Memctl/Memctl.scala:52:32, :53:{32,51,73,92,131,150,172,191,229,248,271,291}]
  wire        _mem_read_Data_tmp_T = mem_addr_judgment == 2'h0;	// @[src/main/Memctl/Memctl.scala:53:32, :54:45]
  wire        _io_ext_ram_ce_n_T_1 = io_mem_read_en | io_mem_write_en;	// @[src/main/Memctl/Memctl.scala:54:78]
  wire        _mem_read_Data_tmp_T_1 = mem_addr_judgment == 2'h1;	// @[src/main/Memctl/Memctl.scala:53:32, :65:45]
  wire        io_ext_ram_oe_n_0 = _mem_read_Data_tmp_T_1 & io_mem_read_en;	// @[src/main/Memctl/Memctl.scala:65:45, :66:60]
  wire        _Serial_obj_io_w_serial_T = mem_addr_judgment == 2'h2;	// @[src/main/Memctl/Memctl.scala:53:32, :73:179]
  reg  [31:0] casez_tmp;	// @[src/main/Memctl/Memctl.scala:73:47]
  always_comb begin	// @[src/main/Memctl/Memctl.scala:54:45, :65:45, :73:{47,106,161,179}]
    casez (mem_addr_judgment)	// @[src/main/Memctl/Memctl.scala:53:32, :54:45, :65:45, :73:{47,106,161,179}]
      2'b00:
        casez_tmp = io_base_ram_data_in;	// @[src/main/Memctl/Memctl.scala:54:45, :65:45, :73:{47,106,161,179}]
      2'b01:
        casez_tmp = io_ext_ram_data_in;	// @[src/main/Memctl/Memctl.scala:54:45, :65:45, :73:{47,106,161,179}]
      2'b10:
        casez_tmp = _Serial_obj_io_Serial_read_Data;	// @[src/main/Memctl/Memctl.scala:47:28, :54:45, :65:45, :73:{47,106,161,179}]
      default:
        casez_tmp = 32'h0;	// @[src/main/Memctl/Memctl.scala:54:45, :65:45, :73:{47,106,161,179}]
    endcase	// @[src/main/Memctl/Memctl.scala:53:32, :54:45, :65:45, :73:{47,106,161,179}]
  end // always_comb
  wire [31:0] mem_read_Data_tmp = io_mem_read_en ? casez_tmp : 32'h0;	// @[src/main/Memctl/Memctl.scala:73:{28,47}]
  Serial Serial_obj (	// @[src/main/Memctl/Memctl.scala:47:28]
    .clock               (clock),
    .reset               (reset),
    .io_RxD              (io_rxd),
    .io_TxD              (io_txd),
    .io_if_get_status    (Serial_obj_io_if_get_status),	// @[src/main/Memctl/Memctl.scala:53:291]
    .io_Serial_read_Data (_Serial_obj_io_Serial_read_Data),
    .io_w_serial_data    (io_mem_write_Data),
    .io_r_serial         (_Serial_obj_io_w_serial_T & io_mem_read_en),	// @[src/main/Memctl/Memctl.scala:73:179, :84:70]
    .io_w_serial         (_Serial_obj_io_w_serial_T & io_mem_write_en)	// @[src/main/Memctl/Memctl.scala:73:179, :85:70]
  );	// @[src/main/Memctl/Memctl.scala:47:28]
  assign io_base_ram_data_out = io_mem_write_Data;	// @[src/main/Memctl/Memctl.scala:5:7]
  assign io_base_ram_addr =
    _mem_read_Data_tmp_T & _io_ext_ram_ce_n_T_1
      ? MemoryAccess_addr[21:2]
      : io_pc_addr[21:2];	// @[src/main/Memctl/Memctl.scala:5:7, :52:32, :54:{45,78}, :61:{28,63,118,135}]
  assign io_base_ram_be_n =
    _mem_read_Data_tmp_T & _io_ext_ram_ce_n_T_1 ? io_r_ram_be_n : 4'h0;	// @[src/main/Memctl/Memctl.scala:5:7, :54:{45,78}, :60:{28,63}]
  assign io_base_ram_oe_n = ~(_mem_read_Data_tmp_T & io_mem_write_en);	// @[src/main/Memctl/Memctl.scala:5:7, :54:45, :56:{28,63}]
  assign io_base_ram_we_n = _mem_read_Data_tmp_T & io_mem_write_en;	// @[src/main/Memctl/Memctl.scala:5:7, :54:45, :57:63]
  assign io_if_base_ram_in = ~(_mem_read_Data_tmp_T & io_mem_write_en);	// @[src/main/Memctl/Memctl.scala:5:7, :54:45, :58:{29,64}]
  assign io_ext_ram_data_out = io_mem_write_Data;	// @[src/main/Memctl/Memctl.scala:5:7]
  assign io_ext_ram_addr = MemoryAccess_addr[21:2];	// @[src/main/Memctl/Memctl.scala:5:7, :52:32, :61:118]
  assign io_ext_ram_be_n = io_r_ram_be_n;	// @[src/main/Memctl/Memctl.scala:5:7]
  assign io_ext_ram_ce_n = _mem_read_Data_tmp_T_1 & _io_ext_ram_ce_n_T_1;	// @[src/main/Memctl/Memctl.scala:5:7, :54:78, :65:{45,59}]
  assign io_ext_ram_oe_n = io_ext_ram_oe_n_0;	// @[src/main/Memctl/Memctl.scala:5:7, :66:60]
  assign io_ext_ram_we_n = _mem_read_Data_tmp_T_1 & io_mem_write_en;	// @[src/main/Memctl/Memctl.scala:5:7, :65:45, :67:60]
  assign io_if_ext_ram_in = io_ext_ram_oe_n_0;	// @[src/main/Memctl/Memctl.scala:5:7, :66:60]
  assign io_if_pc_valid = ~(_mem_read_Data_tmp_T & _io_ext_ram_ce_n_T_1);	// @[src/main/Memctl/Memctl.scala:5:7, :54:{26,45,61,78}]
  assign io_Instruction =
    _mem_read_Data_tmp_T & _io_ext_ram_ce_n_T_1 ? 32'h0 : io_base_ram_data_in;	// @[src/main/Memctl/Memctl.scala:5:7, :54:{45,78}, :62:{26,61}]
  assign io_mem_read_Data =
    io_r_ram_be_n == 4'h7
      ? {24'h0, mem_read_Data_tmp[31:24]}
      : io_r_ram_be_n == 4'hB
          ? {24'h0, mem_read_Data_tmp[23:16]}
          : io_r_ram_be_n == 4'hD
              ? {24'h0, mem_read_Data_tmp[15:8]}
              : io_r_ram_be_n == 4'hE
                  ? {24'h0, mem_read_Data_tmp[7:0]}
                  : mem_read_Data_tmp;	// @[src/main/Memctl/Memctl.scala:5:7, :73:28, :74:68, :76:44, :77:44, :78:44, :79:43]
endmodule

module HaiTangISA(	// @[src/main/HaiTangISA.scala:4:7]
  input         clock,	// @[src/main/HaiTangISA.scala:4:7]
                reset,	// @[src/main/HaiTangISA.scala:4:7]
  input  [31:0] io_base_ram_data_in,	// @[src/main/HaiTangISA.scala:5:16]
  output [31:0] io_base_ram_data_out,	// @[src/main/HaiTangISA.scala:5:16]
  output [19:0] io_base_ram_addr,	// @[src/main/HaiTangISA.scala:5:16]
  output [3:0]  io_base_ram_be_n,	// @[src/main/HaiTangISA.scala:5:16]
  output        io_base_ram_ce_n,	// @[src/main/HaiTangISA.scala:5:16]
                io_base_ram_oe_n,	// @[src/main/HaiTangISA.scala:5:16]
                io_base_ram_we_n,	// @[src/main/HaiTangISA.scala:5:16]
                io_if_base_ram_in,	// @[src/main/HaiTangISA.scala:5:16]
  input  [31:0] io_ext_ram_data_in,	// @[src/main/HaiTangISA.scala:5:16]
  output [31:0] io_ext_ram_data_out,	// @[src/main/HaiTangISA.scala:5:16]
  output [19:0] io_ext_ram_addr,	// @[src/main/HaiTangISA.scala:5:16]
  output [3:0]  io_ext_ram_be_n,	// @[src/main/HaiTangISA.scala:5:16]
  output        io_ext_ram_ce_n,	// @[src/main/HaiTangISA.scala:5:16]
                io_ext_ram_oe_n,	// @[src/main/HaiTangISA.scala:5:16]
                io_ext_ram_we_n,	// @[src/main/HaiTangISA.scala:5:16]
                io_if_ext_ram_in,	// @[src/main/HaiTangISA.scala:5:16]
                io_txd,	// @[src/main/HaiTangISA.scala:5:16]
  input         io_rxd,	// @[src/main/HaiTangISA.scala:5:16]
                io_mem_clock,	// @[src/main/HaiTangISA.scala:5:16]
                io_mem_rst,	// @[src/main/HaiTangISA.scala:5:16]
                io_serial_clock,	// @[src/main/HaiTangISA.scala:5:16]
                io_serial_rst	// @[src/main/HaiTangISA.scala:5:16]
);

  wire        _Memctl_io_base_ram_oe_n;	// @[src/main/HaiTangISA.scala:42:24]
  wire        _Memctl_io_base_ram_we_n;	// @[src/main/HaiTangISA.scala:42:24]
  wire        _Memctl_io_ext_ram_ce_n;	// @[src/main/HaiTangISA.scala:42:24]
  wire        _Memctl_io_ext_ram_oe_n;	// @[src/main/HaiTangISA.scala:42:24]
  wire        _Memctl_io_ext_ram_we_n;	// @[src/main/HaiTangISA.scala:42:24]
  wire        _Memctl_io_if_pc_valid;	// @[src/main/HaiTangISA.scala:42:24]
  wire [31:0] _Memctl_io_Instruction;	// @[src/main/HaiTangISA.scala:42:24]
  wire [31:0] _Memctl_io_mem_read_Data;	// @[src/main/HaiTangISA.scala:42:24]
  wire [31:0] _HaiTangCPU_io_pc_addr;	// @[src/main/HaiTangISA.scala:41:28]
  wire [31:0] _HaiTangCPU_io_r_addr;	// @[src/main/HaiTangISA.scala:41:28]
  wire        _HaiTangCPU_io_r_en;	// @[src/main/HaiTangISA.scala:41:28]
  wire [31:0] _HaiTangCPU_io_w_addr;	// @[src/main/HaiTangISA.scala:41:28]
  wire [31:0] _HaiTangCPU_io_w_data;	// @[src/main/HaiTangISA.scala:41:28]
  wire        _HaiTangCPU_io_w_en;	// @[src/main/HaiTangISA.scala:41:28]
  wire [3:0]  _HaiTangCPU_io_r_ram_be_n;	// @[src/main/HaiTangISA.scala:41:28]
  HaiTangCPU HaiTangCPU (	// @[src/main/HaiTangISA.scala:41:28]
    .clock          (clock),
    .reset          (reset),
    .io_pc_addr     (_HaiTangCPU_io_pc_addr),
    .io_Instruction (_Memctl_io_Instruction),	// @[src/main/HaiTangISA.scala:42:24]
    .io_r_addr      (_HaiTangCPU_io_r_addr),
    .io_r_data      (_Memctl_io_mem_read_Data),	// @[src/main/HaiTangISA.scala:42:24]
    .io_r_en        (_HaiTangCPU_io_r_en),
    .io_w_addr      (_HaiTangCPU_io_w_addr),
    .io_w_data      (_HaiTangCPU_io_w_data),
    .io_w_en        (_HaiTangCPU_io_w_en),
    .io_if_pc_valid (_Memctl_io_if_pc_valid),	// @[src/main/HaiTangISA.scala:42:24]
    .io_r_ram_be_n  (_HaiTangCPU_io_r_ram_be_n)
  );	// @[src/main/HaiTangISA.scala:41:28]
  Memctl Memctl (	// @[src/main/HaiTangISA.scala:42:24]
    .clock                (clock),
    .reset                (reset),
    .io_base_ram_data_in  (io_base_ram_data_in),
    .io_base_ram_data_out (io_base_ram_data_out),
    .io_base_ram_addr     (io_base_ram_addr),
    .io_base_ram_be_n     (io_base_ram_be_n),
    .io_base_ram_oe_n     (_Memctl_io_base_ram_oe_n),
    .io_base_ram_we_n     (_Memctl_io_base_ram_we_n),
    .io_if_base_ram_in    (io_if_base_ram_in),
    .io_ext_ram_data_in   (io_ext_ram_data_in),
    .io_ext_ram_data_out  (io_ext_ram_data_out),
    .io_ext_ram_addr      (io_ext_ram_addr),
    .io_ext_ram_be_n      (io_ext_ram_be_n),
    .io_ext_ram_ce_n      (_Memctl_io_ext_ram_ce_n),
    .io_ext_ram_oe_n      (_Memctl_io_ext_ram_oe_n),
    .io_ext_ram_we_n      (_Memctl_io_ext_ram_we_n),
    .io_if_ext_ram_in     (io_if_ext_ram_in),
    .io_pc_addr           (_HaiTangCPU_io_pc_addr),	// @[src/main/HaiTangISA.scala:41:28]
    .io_if_pc_valid       (_Memctl_io_if_pc_valid),
    .io_Instruction       (_Memctl_io_Instruction),
    .io_r_ram_be_n        (_HaiTangCPU_io_r_ram_be_n),	// @[src/main/HaiTangISA.scala:41:28]
    .io_mem_read_addr     (_HaiTangCPU_io_r_addr),	// @[src/main/HaiTangISA.scala:41:28]
    .io_mem_read_Data     (_Memctl_io_mem_read_Data),
    .io_mem_write_Data    (_HaiTangCPU_io_w_data),	// @[src/main/HaiTangISA.scala:41:28]
    .io_mem_write_addr    (_HaiTangCPU_io_w_addr),	// @[src/main/HaiTangISA.scala:41:28]
    .io_mem_read_en       (_HaiTangCPU_io_r_en),	// @[src/main/HaiTangISA.scala:41:28]
    .io_mem_write_en      (_HaiTangCPU_io_w_en),	// @[src/main/HaiTangISA.scala:41:28]
    .io_txd               (io_txd),
    .io_rxd               (io_rxd)
  );	// @[src/main/HaiTangISA.scala:42:24]
  assign io_base_ram_ce_n = 1'h0;	// @[src/main/HaiTangISA.scala:4:7]
  assign io_base_ram_oe_n = ~_Memctl_io_base_ram_oe_n;	// @[src/main/HaiTangISA.scala:4:7, :42:24, :62:25]
  assign io_base_ram_we_n = ~_Memctl_io_base_ram_we_n;	// @[src/main/HaiTangISA.scala:4:7, :42:24, :63:25]
  assign io_ext_ram_ce_n = ~_Memctl_io_ext_ram_ce_n;	// @[src/main/HaiTangISA.scala:4:7, :42:24, :69:24]
  assign io_ext_ram_oe_n = ~_Memctl_io_ext_ram_oe_n;	// @[src/main/HaiTangISA.scala:4:7, :42:24, :70:24]
  assign io_ext_ram_we_n = ~_Memctl_io_ext_ram_we_n;	// @[src/main/HaiTangISA.scala:4:7, :42:24, :71:24]
endmodule


// ----- 8< ----- FILE "./async.v" ----- 8< -----

////////////////////////////////////////////////////////
// RS-232 RX and TX module
// (c) fpga4fun.com & KNJN LLC - 2003 to 2016

// The RS-232 settings are fixed
// TX: 8-bit data, 2 stop, no-parity
// RX: 8-bit data, 1 stop, no-parity (the receiver can accept more stop bits of course)

//`define SIMULATION   // in this mode, TX outputs one bit per clock cycle
                       // and RX receives one bit per clock cycle (for fast simulations)

////////////////////////////////////////////////////////

module async_transmitter(
	input wire clk,
	input wire TxD_start,
	input wire [7:0] TxD_data,
	output wire TxD,
	output wire TxD_busy
);

// Assert TxD_start for (at least) one clock cycle to start transmission of TxD_data
// TxD_data is latched so that it doesn't have to stay valid while it is being sent

parameter ClkFrequency = 20000000;	// 25MHz
parameter Baud = 9600;

// generate
// 	if(ClkFrequency<Baud*8 && (ClkFrequency % Baud!=0)) ASSERTION_ERROR PARAMETER_OUT_OF_RANGE("Frequency incompatible with requested Baud rate");
// endgenerate

////////////////////////////////
`ifdef SIMULATION
wire BitTick = 1'b1;  // output one bit per clock cycle
`else
wire BitTick;
BaudTickGen #(ClkFrequency, Baud) tickgen(.clk(clk), .enable(TxD_busy), .tick(BitTick));
`endif

reg [3:0] TxD_state = 0;
wire TxD_ready = (TxD_state==0);
assign TxD_busy = ~TxD_ready;

reg [7:0] TxD_shift = 0;
always @(posedge clk)
begin
	if(TxD_ready & TxD_start)
		TxD_shift <= TxD_data;
	else
	if(TxD_state[3] & BitTick)
		TxD_shift <= (TxD_shift >> 1);

	case(TxD_state)
		4'b0000: if(TxD_start) TxD_state <= 4'b0100;
		4'b0100: if(BitTick) TxD_state <= 4'b1000;  // start bit
		4'b1000: if(BitTick) TxD_state <= 4'b1001;  // bit 0
		4'b1001: if(BitTick) TxD_state <= 4'b1010;  // bit 1
		4'b1010: if(BitTick) TxD_state <= 4'b1011;  // bit 2
		4'b1011: if(BitTick) TxD_state <= 4'b1100;  // bit 3
		4'b1100: if(BitTick) TxD_state <= 4'b1101;  // bit 4
		4'b1101: if(BitTick) TxD_state <= 4'b1110;  // bit 5
		4'b1110: if(BitTick) TxD_state <= 4'b1111;  // bit 6
		4'b1111: if(BitTick) TxD_state <= 4'b0010;  // bit 7
		4'b0010: if(BitTick) TxD_state <= 4'b0000;  // stop1
		//4'b0011: if(BitTick) TxD_state <= 4'b0000;  // stop2
		default: if(BitTick) TxD_state <= 4'b0000;
	endcase
end

assign TxD = (TxD_state<4) | (TxD_state[3] & TxD_shift[0]);  // put together the start, data and stop bits
endmodule


////////////////////////////////////////////////////////
module async_receiver(
	input wire clk,
	input wire RxD,
	output reg RxD_data_ready,
	input wire RxD_clear,
	output reg [7:0] RxD_data  // data received, valid only (for one clock cycle) when RxD_data_ready is asserted
);

parameter ClkFrequency = 20000000; // 25MHz
parameter Baud = 9600;

parameter Oversampling = 8;  // needs to be a power of 2
// we oversample the RxD line at a fixed rate to capture each RxD data bit at the "right" time
// 8 times oversampling by default, use 16 for higher quality reception

// generate
// 	if(ClkFrequency<Baud*Oversampling) ASSERTION_ERROR PARAMETER_OUT_OF_RANGE("Frequency too low for current Baud rate and oversampling");
// 	if(Oversampling<8 || ((Oversampling & (Oversampling-1))!=0)) ASSERTION_ERROR PARAMETER_OUT_OF_RANGE("Invalid oversampling value");
// endgenerate

////////////////////////////////

// We also detect if a gap occurs in the received stream of characters
// That can be useful if multiple characters are sent in burst
//  so that multiple characters can be treated as a "packet"
wire RxD_idle;  // asserted when no data has been received for a while
reg RxD_endofpacket; // asserted for one clock cycle when a packet has been detected (i.e. RxD_idle is going high)


reg [3:0] RxD_state = 0;

`ifdef SIMULATION
wire RxD_bit = RxD;
wire sampleNow = 1'b1;  // receive one bit per clock cycle

`else
wire OversamplingTick;
BaudTickGen #(ClkFrequency, Baud, Oversampling) tickgen(.clk(clk), .enable(1'b1), .tick(OversamplingTick));

// synchronize RxD to our clk domain
reg [1:0] RxD_sync = 2'b11;
always @(posedge clk) if(OversamplingTick) RxD_sync <= {RxD_sync[0], RxD};

// and filter it
reg [1:0] Filter_cnt = 2'b11;
reg RxD_bit = 1'b1;

always @(posedge clk)
if(OversamplingTick)
begin
	if(RxD_sync[1]==1'b1 && Filter_cnt!=2'b11) Filter_cnt <= Filter_cnt + 1'd1;
	else 
	if(RxD_sync[1]==1'b0 && Filter_cnt!=2'b00) Filter_cnt <= Filter_cnt - 1'd1;

	if(Filter_cnt==2'b11) RxD_bit <= 1'b1;
	else
	if(Filter_cnt==2'b00) RxD_bit <= 1'b0;
end

// and decide when is the good time to sample the RxD line
function integer log2(input integer v); begin log2=0; while(v>>log2) log2=log2+1; end endfunction
localparam l2o = log2(Oversampling);
reg [l2o-2:0] OversamplingCnt = 0;
always @(posedge clk) if(OversamplingTick) OversamplingCnt <= (RxD_state==0) ? 1'd0 : OversamplingCnt + 1'd1;
wire sampleNow = OversamplingTick && (OversamplingCnt==Oversampling/2-1);
`endif

// now we can accumulate the RxD bits in a shift-register
always @(posedge clk)
case(RxD_state)
	4'b0000: if(~RxD_bit) RxD_state <= `ifdef SIMULATION 4'b1000 `else 4'b0001 `endif;  // start bit found?
	4'b0001: if(sampleNow) RxD_state <= 4'b1000;  // sync start bit to sampleNow
	4'b1000: if(sampleNow) RxD_state <= 4'b1001;  // bit 0
	4'b1001: if(sampleNow) RxD_state <= 4'b1010;  // bit 1
	4'b1010: if(sampleNow) RxD_state <= 4'b1011;  // bit 2
	4'b1011: if(sampleNow) RxD_state <= 4'b1100;  // bit 3
	4'b1100: if(sampleNow) RxD_state <= 4'b1101;  // bit 4
	4'b1101: if(sampleNow) RxD_state <= 4'b1110;  // bit 5
	4'b1110: if(sampleNow) RxD_state <= 4'b1111;  // bit 6
	4'b1111: if(sampleNow) RxD_state <= 4'b0010;  // bit 7
	4'b0010: if(sampleNow) RxD_state <= 4'b0000;  // stop bit
	default: RxD_state <= 4'b0000;
endcase

always @(posedge clk)
if(sampleNow && RxD_state[3]) RxD_data <= {RxD_bit, RxD_data[7:1]};

//reg RxD_data_error = 0;
always @(posedge clk)
begin
	if(RxD_clear)
		RxD_data_ready <= 0;
	else
		RxD_data_ready <= RxD_data_ready | (sampleNow && RxD_state==4'b0010 && RxD_bit);  // make sure a stop bit is received
	//RxD_data_error <= (sampleNow && RxD_state==4'b0010 && ~RxD_bit);  // error if a stop bit is not received
end

`ifdef SIMULATION
assign RxD_idle = 0;
`else
reg [l2o+1:0] GapCnt = 0;
always @(posedge clk) if (RxD_state!=0) GapCnt<=0; else if(OversamplingTick & ~GapCnt[log2(Oversampling)+1]) GapCnt <= GapCnt + 1'h1;
assign RxD_idle = GapCnt[l2o+1];
always @(posedge clk) RxD_endofpacket <= OversamplingTick & ~GapCnt[l2o+1] & &GapCnt[l2o:0];
`endif

endmodule


////////////////////////////////////////////////////////
// dummy module used to be able to raise an assertion in Verilog
module ASSERTION_ERROR();
endmodule


////////////////////////////////////////////////////////
module BaudTickGen(
	input  wire clk, enable,
	output wire tick  // generate a tick at the specified baud rate * oversampling
);
parameter ClkFrequency = 20000000;
parameter Baud = 9600;
parameter Oversampling = 1;

function integer log2(input integer v); begin log2=0; while(v>>log2) log2=log2+1; end endfunction
localparam AccWidth = log2(ClkFrequency/Baud)+8;  // +/- 2% max timing error over a byte
reg [AccWidth:0] Acc = 0;
localparam ShiftLimiter = log2(Baud*Oversampling >> (31-AccWidth));  // this makes sure Inc calculation doesn't overflow
localparam Inc = ((Baud*Oversampling << (AccWidth-ShiftLimiter))+(ClkFrequency>>(ShiftLimiter+1)))/(ClkFrequency>>ShiftLimiter);
always @(posedge clk) if(enable) Acc <= Acc[AccWidth-1:0] + Inc[AccWidth:0]; else Acc <= Inc[AccWidth:0];
assign tick = Acc[AccWidth];
endmodule


////////////////////////////////////////////////////////

// ----- 8< ----- FILE "firrtl_black_box_resource_files.f" ----- 8< -----

